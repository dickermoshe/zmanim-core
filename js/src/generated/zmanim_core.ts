// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!
import * as wasmBundle from "./wasm-bindgen/index.js";
import {
  type FfiConverter, 
  type UniffiByteArray, 
  type UniffiObjectFactory, 
  type UniffiRustArcPtr, 
  type UnsafeMutableRawPointer, 
  AbstractFfiConverterByteArray, 
  FfiConverterBool, 
  FfiConverterFloat64, 
  FfiConverterInt32, 
  FfiConverterInt64, 
  FfiConverterObject, 
  FfiConverterOptional, 
  FfiConverterUInt64, 
  RustBuffer, 
  UniffiAbstractObject, 
  UniffiInternalError, 
  UniffiRustCaller, 
  destructorGuardSymbol, 
  pointerLiteralSymbol, 
  uniffiCreateFfiConverterString, 
  uniffiTypeNameSymbol } from "uniffi-bindgen-react-native";

// Get converters from the other files, if any.
const nativeModule = () => wasmBundle;
const uniffiCaller = new UniffiRustCaller(() => new wasmBundle.RustCallStatus());

const uniffiIsDebug =
  // @ts-ignore -- The process global might not be defined
  typeof process !== "object" ||
  // @ts-ignore -- The process global might not be defined
  process?.env?.NODE_ENV !== "production" ||
  false;
// Public interface members begin here.

export function newAstronomicalCalendar(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface): AstronomicalCalendarInterface {
    return FfiConverterTypeAstronomicalCalendar.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_func_new_astronomical_calendar(
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
export function newComplexZmanimCalendar(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface, useAstronomicalChatzos: boolean, useAstronomicalChatzosForOtherZmanim: boolean, candleLightingOffset: /*i64*/bigint, ateretTorahSunsetOffset: /*i64*/bigint): ComplexZmanimCalendarInterface {
    return FfiConverterTypeComplexZmanimCalendar.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_func_new_complex_zmanim_calendar(
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
        FfiConverterBool.lower(useAstronomicalChatzos),
        FfiConverterBool.lower(useAstronomicalChatzosForOtherZmanim),
        FfiConverterInt64.lower(candleLightingOffset),
        FfiConverterInt64.lower(ateretTorahSunsetOffset),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
export function newGeolocation(latitude: /*f64*/number, longitude: /*f64*/number, elevation: /*f64*/number): GeoLocationInterface | undefined {
    return FfiConverterOptionalTypeGeoLocation.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_func_new_geolocation(
        FfiConverterFloat64.lower(latitude),
        FfiConverterFloat64.lower(longitude),
        FfiConverterFloat64.lower(elevation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
export function newJewishDate(timestamp: /*i64*/bigint, tzOffset: /*i64*/bigint): JewishDateInterface | undefined {
    return FfiConverterOptionalTypeJewishDate.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_func_new_jewish_date(
        FfiConverterInt64.lower(timestamp),
        FfiConverterInt64.lower(tzOffset),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
export function newNoaaCalculator(): NoaaCalculatorInterface {
    return FfiConverterTypeNOAACalculator.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_func_new_noaa_calculator(
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
export function newZmanimCalendar(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface, useAstronomicalChatzos: boolean, useAstronomicalChatzosForOtherZmanim: boolean, candleLightingOffset: /*i64*/bigint): ZmanimCalendarInterface {
    return FfiConverterTypeZmanimCalendar.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_func_new_zmanim_calendar(
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
        FfiConverterBool.lower(useAstronomicalChatzos),
        FfiConverterBool.lower(useAstronomicalChatzosForOtherZmanim),
        FfiConverterInt64.lower(candleLightingOffset),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }










const stringConverter = (() => {
    const encoder = new TextEncoder();
    const decoder = new TextDecoder();
    return {
        stringToBytes: (s: string) => encoder.encode(s),
        bytesToString: (ab: UniffiByteArray) => decoder.decode(ab),
        stringByteLength: (s: string) => encoder.encode(s).byteLength,
    };
})();
const FfiConverterString = uniffiCreateFfiConverterString(stringConverter);




export enum BavliTractate {
    Berachos = 0,
    Shabbos = 1,
    Eruvin = 2,
    Pesachim = 3,
    Shekalim = 4,
    Yoma = 5,
    Sukkah = 6,
    Beitzah = 7,
    RoshHashana = 8,
    Taanis = 9,
    Megillah = 10,
    MoedKatan = 11,
    Chagigah = 12,
    Yevamos = 13,
    Kesubos = 14,
    Nedarim = 15,
    Nazir = 16,
    Sotah = 17,
    Gitin = 18,
    Kiddushin = 19,
    BavaKamma = 20,
    BavaMetzia = 21,
    BavaBasra = 22,
    Sanhedrin = 23,
    Makkos = 24,
    Shevuos = 25,
    AvodahZarah = 26,
    Horiyos = 27,
    Zevachim = 28,
    Menachos = 29,
    Chullin = 30,
    Bechoros = 31,
    Arachin = 32,
    Temurah = 33,
    Kerisos = 34,
    Meilah = 35,
    Kinnim = 36,
    Tamid = 37,
    Midos = 38,
    Niddah = 39
}

const FfiConverterTypeBavliTractate = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = BavliTractate;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return BavliTractate.Berachos;
                case 2: return BavliTractate.Shabbos;
                case 3: return BavliTractate.Eruvin;
                case 4: return BavliTractate.Pesachim;
                case 5: return BavliTractate.Shekalim;
                case 6: return BavliTractate.Yoma;
                case 7: return BavliTractate.Sukkah;
                case 8: return BavliTractate.Beitzah;
                case 9: return BavliTractate.RoshHashana;
                case 10: return BavliTractate.Taanis;
                case 11: return BavliTractate.Megillah;
                case 12: return BavliTractate.MoedKatan;
                case 13: return BavliTractate.Chagigah;
                case 14: return BavliTractate.Yevamos;
                case 15: return BavliTractate.Kesubos;
                case 16: return BavliTractate.Nedarim;
                case 17: return BavliTractate.Nazir;
                case 18: return BavliTractate.Sotah;
                case 19: return BavliTractate.Gitin;
                case 20: return BavliTractate.Kiddushin;
                case 21: return BavliTractate.BavaKamma;
                case 22: return BavliTractate.BavaMetzia;
                case 23: return BavliTractate.BavaBasra;
                case 24: return BavliTractate.Sanhedrin;
                case 25: return BavliTractate.Makkos;
                case 26: return BavliTractate.Shevuos;
                case 27: return BavliTractate.AvodahZarah;
                case 28: return BavliTractate.Horiyos;
                case 29: return BavliTractate.Zevachim;
                case 30: return BavliTractate.Menachos;
                case 31: return BavliTractate.Chullin;
                case 32: return BavliTractate.Bechoros;
                case 33: return BavliTractate.Arachin;
                case 34: return BavliTractate.Temurah;
                case 35: return BavliTractate.Kerisos;
                case 36: return BavliTractate.Meilah;
                case 37: return BavliTractate.Kinnim;
                case 38: return BavliTractate.Tamid;
                case 39: return BavliTractate.Midos;
                case 40: return BavliTractate.Niddah;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case BavliTractate.Berachos: return ordinalConverter.write(1, into);
                case BavliTractate.Shabbos: return ordinalConverter.write(2, into);
                case BavliTractate.Eruvin: return ordinalConverter.write(3, into);
                case BavliTractate.Pesachim: return ordinalConverter.write(4, into);
                case BavliTractate.Shekalim: return ordinalConverter.write(5, into);
                case BavliTractate.Yoma: return ordinalConverter.write(6, into);
                case BavliTractate.Sukkah: return ordinalConverter.write(7, into);
                case BavliTractate.Beitzah: return ordinalConverter.write(8, into);
                case BavliTractate.RoshHashana: return ordinalConverter.write(9, into);
                case BavliTractate.Taanis: return ordinalConverter.write(10, into);
                case BavliTractate.Megillah: return ordinalConverter.write(11, into);
                case BavliTractate.MoedKatan: return ordinalConverter.write(12, into);
                case BavliTractate.Chagigah: return ordinalConverter.write(13, into);
                case BavliTractate.Yevamos: return ordinalConverter.write(14, into);
                case BavliTractate.Kesubos: return ordinalConverter.write(15, into);
                case BavliTractate.Nedarim: return ordinalConverter.write(16, into);
                case BavliTractate.Nazir: return ordinalConverter.write(17, into);
                case BavliTractate.Sotah: return ordinalConverter.write(18, into);
                case BavliTractate.Gitin: return ordinalConverter.write(19, into);
                case BavliTractate.Kiddushin: return ordinalConverter.write(20, into);
                case BavliTractate.BavaKamma: return ordinalConverter.write(21, into);
                case BavliTractate.BavaMetzia: return ordinalConverter.write(22, into);
                case BavliTractate.BavaBasra: return ordinalConverter.write(23, into);
                case BavliTractate.Sanhedrin: return ordinalConverter.write(24, into);
                case BavliTractate.Makkos: return ordinalConverter.write(25, into);
                case BavliTractate.Shevuos: return ordinalConverter.write(26, into);
                case BavliTractate.AvodahZarah: return ordinalConverter.write(27, into);
                case BavliTractate.Horiyos: return ordinalConverter.write(28, into);
                case BavliTractate.Zevachim: return ordinalConverter.write(29, into);
                case BavliTractate.Menachos: return ordinalConverter.write(30, into);
                case BavliTractate.Chullin: return ordinalConverter.write(31, into);
                case BavliTractate.Bechoros: return ordinalConverter.write(32, into);
                case BavliTractate.Arachin: return ordinalConverter.write(33, into);
                case BavliTractate.Temurah: return ordinalConverter.write(34, into);
                case BavliTractate.Kerisos: return ordinalConverter.write(35, into);
                case BavliTractate.Meilah: return ordinalConverter.write(36, into);
                case BavliTractate.Kinnim: return ordinalConverter.write(37, into);
                case BavliTractate.Tamid: return ordinalConverter.write(38, into);
                case BavliTractate.Midos: return ordinalConverter.write(39, into);
                case BavliTractate.Niddah: return ordinalConverter.write(40, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum DayOfWeek {
    Sunday = 1,
    Monday = 2,
    Tuesday = 3,
    Wednesday = 4,
    Thursday = 5,
    Friday = 6,
    Saturday = 7
}

const FfiConverterTypeDayOfWeek = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = DayOfWeek;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return DayOfWeek.Sunday;
                case 2: return DayOfWeek.Monday;
                case 3: return DayOfWeek.Tuesday;
                case 4: return DayOfWeek.Wednesday;
                case 5: return DayOfWeek.Thursday;
                case 6: return DayOfWeek.Friday;
                case 7: return DayOfWeek.Saturday;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case DayOfWeek.Sunday: return ordinalConverter.write(1, into);
                case DayOfWeek.Monday: return ordinalConverter.write(2, into);
                case DayOfWeek.Tuesday: return ordinalConverter.write(3, into);
                case DayOfWeek.Wednesday: return ordinalConverter.write(4, into);
                case DayOfWeek.Thursday: return ordinalConverter.write(5, into);
                case DayOfWeek.Friday: return ordinalConverter.write(6, into);
                case DayOfWeek.Saturday: return ordinalConverter.write(7, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum Formula {
    Distance = 0,
    InitialBearing = 1,
    FinalBearing = 2
}

const FfiConverterTypeFormula = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = Formula;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return Formula.Distance;
                case 2: return Formula.InitialBearing;
                case 3: return Formula.FinalBearing;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case Formula.Distance: return ordinalConverter.write(1, into);
                case Formula.InitialBearing: return ordinalConverter.write(2, into);
                case Formula.FinalBearing: return ordinalConverter.write(3, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum JewishHoliday {
    ErevPesach = 0,
    Pesach = 1,
    CholHamoedPesach = 2,
    PesachSheni = 3,
    ErevShavuos = 4,
    Shavuos = 5,
    SeventeenOfTammuz = 6,
    TishaBeav = 7,
    TuBeav = 8,
    ErevRoshHashana = 9,
    RoshHashana = 10,
    FastOfGedalyah = 11,
    ErevYomKippur = 12,
    YomKippur = 13,
    ErevSuccos = 14,
    Succos = 15,
    CholHamoedSuccos = 16,
    HoshanaRabba = 17,
    SheminiAtzeres = 18,
    SimchasTorah = 19,
    Chanukah = 21,
    TenthOfTeves = 22,
    TuBeshvat = 23,
    FastOfEsther = 24,
    Purim = 25,
    ShushanPurim = 26,
    PurimKatan = 27,
    RoshChodesh = 28,
    YomHashoah = 29,
    YomHazikaron = 30,
    YomHaatzmaut = 31,
    YomYerushalayim = 32,
    LagBaomer = 33,
    ShushanPurimKatan = 34,
    IsruChag = 35,
    YomKippurKatan = 36,
    Behab = 37
}

const FfiConverterTypeJewishHoliday = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = JewishHoliday;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return JewishHoliday.ErevPesach;
                case 2: return JewishHoliday.Pesach;
                case 3: return JewishHoliday.CholHamoedPesach;
                case 4: return JewishHoliday.PesachSheni;
                case 5: return JewishHoliday.ErevShavuos;
                case 6: return JewishHoliday.Shavuos;
                case 7: return JewishHoliday.SeventeenOfTammuz;
                case 8: return JewishHoliday.TishaBeav;
                case 9: return JewishHoliday.TuBeav;
                case 10: return JewishHoliday.ErevRoshHashana;
                case 11: return JewishHoliday.RoshHashana;
                case 12: return JewishHoliday.FastOfGedalyah;
                case 13: return JewishHoliday.ErevYomKippur;
                case 14: return JewishHoliday.YomKippur;
                case 15: return JewishHoliday.ErevSuccos;
                case 16: return JewishHoliday.Succos;
                case 17: return JewishHoliday.CholHamoedSuccos;
                case 18: return JewishHoliday.HoshanaRabba;
                case 19: return JewishHoliday.SheminiAtzeres;
                case 20: return JewishHoliday.SimchasTorah;
                case 21: return JewishHoliday.Chanukah;
                case 22: return JewishHoliday.TenthOfTeves;
                case 23: return JewishHoliday.TuBeshvat;
                case 24: return JewishHoliday.FastOfEsther;
                case 25: return JewishHoliday.Purim;
                case 26: return JewishHoliday.ShushanPurim;
                case 27: return JewishHoliday.PurimKatan;
                case 28: return JewishHoliday.RoshChodesh;
                case 29: return JewishHoliday.YomHashoah;
                case 30: return JewishHoliday.YomHazikaron;
                case 31: return JewishHoliday.YomHaatzmaut;
                case 32: return JewishHoliday.YomYerushalayim;
                case 33: return JewishHoliday.LagBaomer;
                case 34: return JewishHoliday.ShushanPurimKatan;
                case 35: return JewishHoliday.IsruChag;
                case 36: return JewishHoliday.YomKippurKatan;
                case 37: return JewishHoliday.Behab;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case JewishHoliday.ErevPesach: return ordinalConverter.write(1, into);
                case JewishHoliday.Pesach: return ordinalConverter.write(2, into);
                case JewishHoliday.CholHamoedPesach: return ordinalConverter.write(3, into);
                case JewishHoliday.PesachSheni: return ordinalConverter.write(4, into);
                case JewishHoliday.ErevShavuos: return ordinalConverter.write(5, into);
                case JewishHoliday.Shavuos: return ordinalConverter.write(6, into);
                case JewishHoliday.SeventeenOfTammuz: return ordinalConverter.write(7, into);
                case JewishHoliday.TishaBeav: return ordinalConverter.write(8, into);
                case JewishHoliday.TuBeav: return ordinalConverter.write(9, into);
                case JewishHoliday.ErevRoshHashana: return ordinalConverter.write(10, into);
                case JewishHoliday.RoshHashana: return ordinalConverter.write(11, into);
                case JewishHoliday.FastOfGedalyah: return ordinalConverter.write(12, into);
                case JewishHoliday.ErevYomKippur: return ordinalConverter.write(13, into);
                case JewishHoliday.YomKippur: return ordinalConverter.write(14, into);
                case JewishHoliday.ErevSuccos: return ordinalConverter.write(15, into);
                case JewishHoliday.Succos: return ordinalConverter.write(16, into);
                case JewishHoliday.CholHamoedSuccos: return ordinalConverter.write(17, into);
                case JewishHoliday.HoshanaRabba: return ordinalConverter.write(18, into);
                case JewishHoliday.SheminiAtzeres: return ordinalConverter.write(19, into);
                case JewishHoliday.SimchasTorah: return ordinalConverter.write(20, into);
                case JewishHoliday.Chanukah: return ordinalConverter.write(21, into);
                case JewishHoliday.TenthOfTeves: return ordinalConverter.write(22, into);
                case JewishHoliday.TuBeshvat: return ordinalConverter.write(23, into);
                case JewishHoliday.FastOfEsther: return ordinalConverter.write(24, into);
                case JewishHoliday.Purim: return ordinalConverter.write(25, into);
                case JewishHoliday.ShushanPurim: return ordinalConverter.write(26, into);
                case JewishHoliday.PurimKatan: return ordinalConverter.write(27, into);
                case JewishHoliday.RoshChodesh: return ordinalConverter.write(28, into);
                case JewishHoliday.YomHashoah: return ordinalConverter.write(29, into);
                case JewishHoliday.YomHazikaron: return ordinalConverter.write(30, into);
                case JewishHoliday.YomHaatzmaut: return ordinalConverter.write(31, into);
                case JewishHoliday.YomYerushalayim: return ordinalConverter.write(32, into);
                case JewishHoliday.LagBaomer: return ordinalConverter.write(33, into);
                case JewishHoliday.ShushanPurimKatan: return ordinalConverter.write(34, into);
                case JewishHoliday.IsruChag: return ordinalConverter.write(35, into);
                case JewishHoliday.YomKippurKatan: return ordinalConverter.write(36, into);
                case JewishHoliday.Behab: return ordinalConverter.write(37, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum JewishMonth {
    Nissan = 1,
    Iyar = 2,
    Sivan = 3,
    Tammuz = 4,
    Av = 5,
    Elul = 6,
    Tishrei = 7,
    Cheshvan = 8,
    Kislev = 9,
    Teves = 10,
    Shevat = 11,
    Adar = 12,
    Adarii = 13
}

const FfiConverterTypeJewishMonth = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = JewishMonth;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return JewishMonth.Nissan;
                case 2: return JewishMonth.Iyar;
                case 3: return JewishMonth.Sivan;
                case 4: return JewishMonth.Tammuz;
                case 5: return JewishMonth.Av;
                case 6: return JewishMonth.Elul;
                case 7: return JewishMonth.Tishrei;
                case 8: return JewishMonth.Cheshvan;
                case 9: return JewishMonth.Kislev;
                case 10: return JewishMonth.Teves;
                case 11: return JewishMonth.Shevat;
                case 12: return JewishMonth.Adar;
                case 13: return JewishMonth.Adarii;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case JewishMonth.Nissan: return ordinalConverter.write(1, into);
                case JewishMonth.Iyar: return ordinalConverter.write(2, into);
                case JewishMonth.Sivan: return ordinalConverter.write(3, into);
                case JewishMonth.Tammuz: return ordinalConverter.write(4, into);
                case JewishMonth.Av: return ordinalConverter.write(5, into);
                case JewishMonth.Elul: return ordinalConverter.write(6, into);
                case JewishMonth.Tishrei: return ordinalConverter.write(7, into);
                case JewishMonth.Cheshvan: return ordinalConverter.write(8, into);
                case JewishMonth.Kislev: return ordinalConverter.write(9, into);
                case JewishMonth.Teves: return ordinalConverter.write(10, into);
                case JewishMonth.Shevat: return ordinalConverter.write(11, into);
                case JewishMonth.Adar: return ordinalConverter.write(12, into);
                case JewishMonth.Adarii: return ordinalConverter.write(13, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum Parsha {
    None = 0,
    Bereshis = 1,
    Noach = 2,
    LechLecha = 3,
    Vayera = 4,
    ChayeiSara = 5,
    Toldos = 6,
    Vayetzei = 7,
    Vayishlach = 8,
    Vayeshev = 9,
    Miketz = 10,
    Vayigash = 11,
    Vayechi = 12,
    Shemos = 13,
    Vaera = 14,
    Bo = 15,
    Beshalach = 16,
    Yisro = 17,
    Mishpatim = 18,
    Terumah = 19,
    Tetzaveh = 20,
    KiSisa = 21,
    Vayakhel = 22,
    Pekudei = 23,
    Vayikra = 24,
    Tzav = 25,
    Shmini = 26,
    Tazria = 27,
    Metzora = 28,
    AchreiMos = 29,
    Kedoshim = 30,
    Emor = 31,
    Behar = 32,
    Bechukosai = 33,
    Bamidbar = 34,
    Nasso = 35,
    Behaaloscha = 36,
    Shlach = 37,
    Korach = 38,
    Chukas = 39,
    Balak = 40,
    Pinchas = 41,
    Matos = 42,
    Masei = 43,
    Devarim = 44,
    Vaeschanan = 45,
    Eikev = 46,
    Reeh = 47,
    Shoftim = 48,
    KiSeitzei = 49,
    KiSavo = 50,
    Nitzavim = 51,
    Vayeilech = 52,
    Haazinu = 53,
    VzosHaberacha = 54,
    VayakhelPekudei = 55,
    TazriaMetzora = 56,
    AchreiMosKedoshim = 57,
    BeharBechukosai = 58,
    ChukasBalak = 59,
    MatosMasei = 60,
    NitzavimVayeilech = 61,
    Shkalim = 62,
    Zachor = 63,
    Para = 64,
    Hachodesh = 65,
    Shuva = 66,
    Shira = 67,
    Hagadol = 68,
    Chazon = 69,
    Nachamu = 70
}

const FfiConverterTypeParsha = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = Parsha;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return Parsha.None;
                case 2: return Parsha.Bereshis;
                case 3: return Parsha.Noach;
                case 4: return Parsha.LechLecha;
                case 5: return Parsha.Vayera;
                case 6: return Parsha.ChayeiSara;
                case 7: return Parsha.Toldos;
                case 8: return Parsha.Vayetzei;
                case 9: return Parsha.Vayishlach;
                case 10: return Parsha.Vayeshev;
                case 11: return Parsha.Miketz;
                case 12: return Parsha.Vayigash;
                case 13: return Parsha.Vayechi;
                case 14: return Parsha.Shemos;
                case 15: return Parsha.Vaera;
                case 16: return Parsha.Bo;
                case 17: return Parsha.Beshalach;
                case 18: return Parsha.Yisro;
                case 19: return Parsha.Mishpatim;
                case 20: return Parsha.Terumah;
                case 21: return Parsha.Tetzaveh;
                case 22: return Parsha.KiSisa;
                case 23: return Parsha.Vayakhel;
                case 24: return Parsha.Pekudei;
                case 25: return Parsha.Vayikra;
                case 26: return Parsha.Tzav;
                case 27: return Parsha.Shmini;
                case 28: return Parsha.Tazria;
                case 29: return Parsha.Metzora;
                case 30: return Parsha.AchreiMos;
                case 31: return Parsha.Kedoshim;
                case 32: return Parsha.Emor;
                case 33: return Parsha.Behar;
                case 34: return Parsha.Bechukosai;
                case 35: return Parsha.Bamidbar;
                case 36: return Parsha.Nasso;
                case 37: return Parsha.Behaaloscha;
                case 38: return Parsha.Shlach;
                case 39: return Parsha.Korach;
                case 40: return Parsha.Chukas;
                case 41: return Parsha.Balak;
                case 42: return Parsha.Pinchas;
                case 43: return Parsha.Matos;
                case 44: return Parsha.Masei;
                case 45: return Parsha.Devarim;
                case 46: return Parsha.Vaeschanan;
                case 47: return Parsha.Eikev;
                case 48: return Parsha.Reeh;
                case 49: return Parsha.Shoftim;
                case 50: return Parsha.KiSeitzei;
                case 51: return Parsha.KiSavo;
                case 52: return Parsha.Nitzavim;
                case 53: return Parsha.Vayeilech;
                case 54: return Parsha.Haazinu;
                case 55: return Parsha.VzosHaberacha;
                case 56: return Parsha.VayakhelPekudei;
                case 57: return Parsha.TazriaMetzora;
                case 58: return Parsha.AchreiMosKedoshim;
                case 59: return Parsha.BeharBechukosai;
                case 60: return Parsha.ChukasBalak;
                case 61: return Parsha.MatosMasei;
                case 62: return Parsha.NitzavimVayeilech;
                case 63: return Parsha.Shkalim;
                case 64: return Parsha.Zachor;
                case 65: return Parsha.Para;
                case 66: return Parsha.Hachodesh;
                case 67: return Parsha.Shuva;
                case 68: return Parsha.Shira;
                case 69: return Parsha.Hagadol;
                case 70: return Parsha.Chazon;
                case 71: return Parsha.Nachamu;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case Parsha.None: return ordinalConverter.write(1, into);
                case Parsha.Bereshis: return ordinalConverter.write(2, into);
                case Parsha.Noach: return ordinalConverter.write(3, into);
                case Parsha.LechLecha: return ordinalConverter.write(4, into);
                case Parsha.Vayera: return ordinalConverter.write(5, into);
                case Parsha.ChayeiSara: return ordinalConverter.write(6, into);
                case Parsha.Toldos: return ordinalConverter.write(7, into);
                case Parsha.Vayetzei: return ordinalConverter.write(8, into);
                case Parsha.Vayishlach: return ordinalConverter.write(9, into);
                case Parsha.Vayeshev: return ordinalConverter.write(10, into);
                case Parsha.Miketz: return ordinalConverter.write(11, into);
                case Parsha.Vayigash: return ordinalConverter.write(12, into);
                case Parsha.Vayechi: return ordinalConverter.write(13, into);
                case Parsha.Shemos: return ordinalConverter.write(14, into);
                case Parsha.Vaera: return ordinalConverter.write(15, into);
                case Parsha.Bo: return ordinalConverter.write(16, into);
                case Parsha.Beshalach: return ordinalConverter.write(17, into);
                case Parsha.Yisro: return ordinalConverter.write(18, into);
                case Parsha.Mishpatim: return ordinalConverter.write(19, into);
                case Parsha.Terumah: return ordinalConverter.write(20, into);
                case Parsha.Tetzaveh: return ordinalConverter.write(21, into);
                case Parsha.KiSisa: return ordinalConverter.write(22, into);
                case Parsha.Vayakhel: return ordinalConverter.write(23, into);
                case Parsha.Pekudei: return ordinalConverter.write(24, into);
                case Parsha.Vayikra: return ordinalConverter.write(25, into);
                case Parsha.Tzav: return ordinalConverter.write(26, into);
                case Parsha.Shmini: return ordinalConverter.write(27, into);
                case Parsha.Tazria: return ordinalConverter.write(28, into);
                case Parsha.Metzora: return ordinalConverter.write(29, into);
                case Parsha.AchreiMos: return ordinalConverter.write(30, into);
                case Parsha.Kedoshim: return ordinalConverter.write(31, into);
                case Parsha.Emor: return ordinalConverter.write(32, into);
                case Parsha.Behar: return ordinalConverter.write(33, into);
                case Parsha.Bechukosai: return ordinalConverter.write(34, into);
                case Parsha.Bamidbar: return ordinalConverter.write(35, into);
                case Parsha.Nasso: return ordinalConverter.write(36, into);
                case Parsha.Behaaloscha: return ordinalConverter.write(37, into);
                case Parsha.Shlach: return ordinalConverter.write(38, into);
                case Parsha.Korach: return ordinalConverter.write(39, into);
                case Parsha.Chukas: return ordinalConverter.write(40, into);
                case Parsha.Balak: return ordinalConverter.write(41, into);
                case Parsha.Pinchas: return ordinalConverter.write(42, into);
                case Parsha.Matos: return ordinalConverter.write(43, into);
                case Parsha.Masei: return ordinalConverter.write(44, into);
                case Parsha.Devarim: return ordinalConverter.write(45, into);
                case Parsha.Vaeschanan: return ordinalConverter.write(46, into);
                case Parsha.Eikev: return ordinalConverter.write(47, into);
                case Parsha.Reeh: return ordinalConverter.write(48, into);
                case Parsha.Shoftim: return ordinalConverter.write(49, into);
                case Parsha.KiSeitzei: return ordinalConverter.write(50, into);
                case Parsha.KiSavo: return ordinalConverter.write(51, into);
                case Parsha.Nitzavim: return ordinalConverter.write(52, into);
                case Parsha.Vayeilech: return ordinalConverter.write(53, into);
                case Parsha.Haazinu: return ordinalConverter.write(54, into);
                case Parsha.VzosHaberacha: return ordinalConverter.write(55, into);
                case Parsha.VayakhelPekudei: return ordinalConverter.write(56, into);
                case Parsha.TazriaMetzora: return ordinalConverter.write(57, into);
                case Parsha.AchreiMosKedoshim: return ordinalConverter.write(58, into);
                case Parsha.BeharBechukosai: return ordinalConverter.write(59, into);
                case Parsha.ChukasBalak: return ordinalConverter.write(60, into);
                case Parsha.MatosMasei: return ordinalConverter.write(61, into);
                case Parsha.NitzavimVayeilech: return ordinalConverter.write(62, into);
                case Parsha.Shkalim: return ordinalConverter.write(63, into);
                case Parsha.Zachor: return ordinalConverter.write(64, into);
                case Parsha.Para: return ordinalConverter.write(65, into);
                case Parsha.Hachodesh: return ordinalConverter.write(66, into);
                case Parsha.Shuva: return ordinalConverter.write(67, into);
                case Parsha.Shira: return ordinalConverter.write(68, into);
                case Parsha.Hagadol: return ordinalConverter.write(69, into);
                case Parsha.Chazon: return ordinalConverter.write(70, into);
                case Parsha.Nachamu: return ordinalConverter.write(71, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum SolarEvent {
    Sunrise = 1,
    Sunset = 2,
    Noon = 3,
    Midnight = 4
}

const FfiConverterTypeSolarEvent = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = SolarEvent;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return SolarEvent.Sunrise;
                case 2: return SolarEvent.Sunset;
                case 3: return SolarEvent.Noon;
                case 4: return SolarEvent.Midnight;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case SolarEvent.Sunrise: return ordinalConverter.write(1, into);
                case SolarEvent.Sunset: return ordinalConverter.write(2, into);
                case SolarEvent.Noon: return ordinalConverter.write(3, into);
                case SolarEvent.Midnight: return ordinalConverter.write(4, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export enum YearLengthType {
    Chaserim = 0,
    Kesidran = 1,
    Shelaimim = 2
}

const FfiConverterTypeYearLengthType = (() => {
    const ordinalConverter = FfiConverterInt32;
    type TypeName = YearLengthType;
    class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
        read(from: RustBuffer): TypeName {
            switch (ordinalConverter.read(from)) {
                case 1: return YearLengthType.Chaserim;
                case 2: return YearLengthType.Kesidran;
                case 3: return YearLengthType.Shelaimim;
                default: throw new UniffiInternalError.UnexpectedEnumCase();
            }
        }
        write(value: TypeName, into: RustBuffer): void {
            switch (value) {
                case YearLengthType.Chaserim: return ordinalConverter.write(1, into);
                case YearLengthType.Kesidran: return ordinalConverter.write(2, into);
                case YearLengthType.Shelaimim: return ordinalConverter.write(3, into);
            }
        }
        allocationSize(value: TypeName): number {
            return ordinalConverter.allocationSize(0);
        }
    }
    return new FFIConverter();
})();





export interface AstronomicalCalculatorInterface {
    
}


export class AstronomicalCalculator extends UniffiAbstractObject implements AstronomicalCalculatorInterface {

    readonly [uniffiTypeNameSymbol] = "AstronomicalCalculator";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeAstronomicalCalculatorObjectFactory.bless(pointer);
}

    

    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeAstronomicalCalculatorObjectFactory.pointer(this);
            uniffiTypeAstronomicalCalculatorObjectFactory.freePointer(pointer);
            uniffiTypeAstronomicalCalculatorObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is AstronomicalCalculator {
        return uniffiTypeAstronomicalCalculatorObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeAstronomicalCalculatorObjectFactory: UniffiObjectFactory<AstronomicalCalculatorInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeAstronomicalCalculatorObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): AstronomicalCalculatorInterface {
        const instance = Object.create(AstronomicalCalculator.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "AstronomicalCalculator";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: AstronomicalCalculatorInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: AstronomicalCalculatorInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_astronomicalcalculator(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_astronomicalcalculator(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is AstronomicalCalculatorInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "AstronomicalCalculator";
    },
}})();
// FfiConverter for AstronomicalCalculatorInterface
const FfiConverterTypeAstronomicalCalculator =  new FfiConverterObject(uniffiTypeAstronomicalCalculatorObjectFactory);


export interface AstronomicalCalendarInterface {
    
    getBeginAstronomicalTwilight() : /*i64*/bigint | undefined;
    getBeginCivilTwilight() : /*i64*/bigint | undefined;
    getBeginNauticalTwilight() : /*i64*/bigint | undefined;
    getEndAstronomicalTwilight() : /*i64*/bigint | undefined;
    getEndCivilTwilight() : /*i64*/bigint | undefined;
    getEndNauticalTwilight() : /*i64*/bigint | undefined;
    getGeoLocation() : GeoLocationInterface;
    getNoaaCalculator() : NoaaCalculatorInterface;
    getSeaLevelSunrise() : /*i64*/bigint | undefined;
    getSeaLevelSunset() : /*i64*/bigint | undefined;
    getSolarMidnight() : /*i64*/bigint | undefined;
    getSunTransit() : /*i64*/bigint | undefined;
    getSunTransitWithStartAndEndTimes(startTime: /*i64*/bigint, endTime: /*i64*/bigint) : /*i64*/bigint | undefined;
    getSunrise() : /*i64*/bigint | undefined;
    getSunriseOffsetByDegrees(degrees: /*f64*/number) : /*i64*/bigint | undefined;
    getSunset() : /*i64*/bigint | undefined;
    getSunsetOffsetByDegrees(degrees: /*f64*/number) : /*i64*/bigint | undefined;
    getTemporalHour() : /*i64*/bigint | undefined;
    getTemporalHourWithStartAndEndTimes(startTime: /*i64*/bigint, endTime: /*i64*/bigint) : /*i64*/bigint | undefined;
    getTimestamp() : /*i64*/bigint;
    getUtcSeaLevelSunrise(zenith: /*f64*/number) : /*f64*/number | undefined;
    getUtcSeaLevelSunset(zenith: /*f64*/number) : /*f64*/number | undefined;
    getUtcSunrise(zenith: /*f64*/number) : /*f64*/number | undefined;
    getUtcSunset(zenith: /*f64*/number) : /*f64*/number | undefined;
}


export class AstronomicalCalendar extends UniffiAbstractObject implements AstronomicalCalendarInterface {

    readonly [uniffiTypeNameSymbol] = "AstronomicalCalendar";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeAstronomicalCalendarObjectFactory.bless(pointer);
}

    

    
public getBeginAstronomicalTwilight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_begin_astronomical_twilight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBeginCivilTwilight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_begin_civil_twilight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBeginNauticalTwilight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_begin_nautical_twilight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getEndAstronomicalTwilight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_end_astronomical_twilight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getEndCivilTwilight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_end_civil_twilight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getEndNauticalTwilight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_end_nautical_twilight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getGeoLocation(): GeoLocationInterface {
    return FfiConverterTypeGeoLocation.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_geo_location(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getNoaaCalculator(): NoaaCalculatorInterface {
    return FfiConverterTypeNOAACalculator.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_noaa_calculator(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSeaLevelSunrise(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sea_level_sunrise(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSeaLevelSunset(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sea_level_sunset(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSolarMidnight(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_solar_midnight(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSunTransit(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sun_transit(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSunTransitWithStartAndEndTimes(startTime: /*i64*/bigint, endTime: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sun_transit_with_start_and_end_times(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startTime),
        FfiConverterInt64.lower(endTime),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSunrise(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sunrise(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSunriseOffsetByDegrees(degrees: /*f64*/number): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sunrise_offset_by_degrees(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(degrees),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSunset(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sunset(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSunsetOffsetByDegrees(degrees: /*f64*/number): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_sunset_offset_by_degrees(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(degrees),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTemporalHour(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_temporal_hour(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTemporalHourWithStartAndEndTimes(startTime: /*i64*/bigint, endTime: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_temporal_hour_with_start_and_end_times(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startTime),
        FfiConverterInt64.lower(endTime),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTimestamp(): /*i64*/bigint {
    return FfiConverterInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_timestamp(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcSeaLevelSunrise(zenith: /*f64*/number): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_utc_sea_level_sunrise(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(zenith),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcSeaLevelSunset(zenith: /*f64*/number): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_utc_sea_level_sunset(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(zenith),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcSunrise(zenith: /*f64*/number): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_utc_sunrise(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(zenith),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcSunset(zenith: /*f64*/number): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_astronomicalcalendar_get_utc_sunset(uniffiTypeAstronomicalCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(zenith),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeAstronomicalCalendarObjectFactory.pointer(this);
            uniffiTypeAstronomicalCalendarObjectFactory.freePointer(pointer);
            uniffiTypeAstronomicalCalendarObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is AstronomicalCalendar {
        return uniffiTypeAstronomicalCalendarObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeAstronomicalCalendarObjectFactory: UniffiObjectFactory<AstronomicalCalendarInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeAstronomicalCalendarObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): AstronomicalCalendarInterface {
        const instance = Object.create(AstronomicalCalendar.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "AstronomicalCalendar";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: AstronomicalCalendarInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: AstronomicalCalendarInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_astronomicalcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_astronomicalcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is AstronomicalCalendarInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "AstronomicalCalendar";
    },
}})();
// FfiConverter for AstronomicalCalendarInterface
const FfiConverterTypeAstronomicalCalendar =  new FfiConverterObject(uniffiTypeAstronomicalCalendarObjectFactory);


export interface BavliDafInterface {
    
}


export class BavliDaf extends UniffiAbstractObject implements BavliDafInterface {

    readonly [uniffiTypeNameSymbol] = "BavliDaf";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeBavliDafObjectFactory.bless(pointer);
}

    

    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeBavliDafObjectFactory.pointer(this);
            uniffiTypeBavliDafObjectFactory.freePointer(pointer);
            uniffiTypeBavliDafObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is BavliDaf {
        return uniffiTypeBavliDafObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeBavliDafObjectFactory: UniffiObjectFactory<BavliDafInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeBavliDafObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): BavliDafInterface {
        const instance = Object.create(BavliDaf.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "BavliDaf";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: BavliDafInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: BavliDafInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_bavlidaf(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_bavlidaf(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is BavliDafInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "BavliDaf";
    },
}})();
// FfiConverter for BavliDafInterface
const FfiConverterTypeBavliDaf =  new FfiConverterObject(uniffiTypeBavliDafObjectFactory);


export interface ComplexZmanimCalendarInterface {
    
    getAlos120() : /*i64*/bigint | undefined;
    getAlos120Zmanis() : /*i64*/bigint | undefined;
    getAlos16Point1Degrees() : /*i64*/bigint | undefined;
    getAlos18Degrees() : /*i64*/bigint | undefined;
    getAlos19Degrees() : /*i64*/bigint | undefined;
    getAlos19Point8Degrees() : /*i64*/bigint | undefined;
    getAlos26Degrees() : /*i64*/bigint | undefined;
    getAlos60() : /*i64*/bigint | undefined;
    getAlos72Zmanis() : /*i64*/bigint | undefined;
    getAlos90() : /*i64*/bigint | undefined;
    getAlos90Zmanis() : /*i64*/bigint | undefined;
    getAlos96() : /*i64*/bigint | undefined;
    getAlos96Zmanis() : /*i64*/bigint | undefined;
    getAlosBaalHatanya() : /*i64*/bigint | undefined;
    getAstronomicalCalendar() : AstronomicalCalendarInterface;
    getAteretTorahSunsetOffset() : /*i64*/bigint;
    getBainHashmashosRt13Point24Degrees() : /*i64*/bigint | undefined;
    getBainHashmashosRt13Point5MinutesBefore7Point083Degrees() : /*i64*/bigint | undefined;
    getBainHashmashosRt2Stars() : /*i64*/bigint | undefined;
    getBainHashmashosRt58Point5Minutes() : /*i64*/bigint | undefined;
    getBainHashmashosYereim13Point5Minutes() : /*i64*/bigint | undefined;
    getBainHashmashosYereim16Point875Minutes() : /*i64*/bigint | undefined;
    getBainHashmashosYereim18Minutes() : /*i64*/bigint | undefined;
    getBainHashmashosYereim2Point1Degrees() : /*i64*/bigint | undefined;
    getBainHashmashosYereim2Point8Degrees() : /*i64*/bigint | undefined;
    getBainHashmashosYereim3Point05Degrees() : /*i64*/bigint | undefined;
    getBainHasmashosrt13Point24Degrees() : /*i64*/bigint | undefined;
    getBainHasmashosrt13Point5MinutesBefore7Point083Degrees() : /*i64*/bigint | undefined;
    getBainHasmashosrt2Stars() : /*i64*/bigint | undefined;
    getBainHasmashosrt58Point5Minutes() : /*i64*/bigint | undefined;
    getBainHasmashosyereim13Point5Minutes() : /*i64*/bigint | undefined;
    getBainHasmashosyereim16Point875Minutes() : /*i64*/bigint | undefined;
    getBainHasmashosyereim18Minutes() : /*i64*/bigint | undefined;
    getBainHasmashosyereim2Point1Degrees() : /*i64*/bigint | undefined;
    getBainHasmashosyereim2Point8Degrees() : /*i64*/bigint | undefined;
    getBainHasmashosyereim3Point05Degrees() : /*i64*/bigint | undefined;
    getCandleLightingOffset() : /*i64*/bigint;
    getFixedLocalChatzos() : /*i64*/bigint | undefined;
    getFixedLocalChatzosBasedZmanim(startOfHalfDay: /*i64*/bigint, endOfHalfDay: /*i64*/bigint, hours: /*f64*/number) : /*i64*/bigint | undefined;
    getMinchaGedola16Point1Degrees() : /*i64*/bigint | undefined;
    getMinchaGedola30Minutes() : /*i64*/bigint | undefined;
    getMinchaGedola72Minutes() : /*i64*/bigint | undefined;
    getMinchaGedolaAhavatShalom() : /*i64*/bigint | undefined;
    getMinchaGedolaAteretTorah() : /*i64*/bigint | undefined;
    getMinchaGedolaBaalHatanya() : /*i64*/bigint | undefined;
    getMinchaGedolaBaalHatanyaGreaterThan30() : /*i64*/bigint | undefined;
    getMinchaGedolaGraFixedLocalChatzos30Minutes() : /*i64*/bigint | undefined;
    getMinchaGedolaGreaterThan30() : /*i64*/bigint | undefined;
    getMinchaKetana16Point1Degrees() : /*i64*/bigint | undefined;
    getMinchaKetana72Minutes() : /*i64*/bigint | undefined;
    getMinchaKetanaAhavatShalom() : /*i64*/bigint | undefined;
    getMinchaKetanaAteretTorah() : /*i64*/bigint | undefined;
    getMinchaKetanaBaalHatanya() : /*i64*/bigint | undefined;
    getMinchaKetanaGraFixedLocalChatzosToSunset() : /*i64*/bigint | undefined;
    getMisheyakir10Point2Degrees() : /*i64*/bigint | undefined;
    getMisheyakir11Degrees() : /*i64*/bigint | undefined;
    getMisheyakir11Point5Degrees() : /*i64*/bigint | undefined;
    getMisheyakir7Point65Degrees() : /*i64*/bigint | undefined;
    getMisheyakir9Point5Degrees() : /*i64*/bigint | undefined;
    getPlagAhavatShalom() : /*i64*/bigint | undefined;
    getPlagAlos16Point1ToTzaisGeonim7Point083Degrees() : /*i64*/bigint | undefined;
    getPlagAlosToSunset() : /*i64*/bigint | undefined;
    getPlagHamincha120Minutes() : /*i64*/bigint | undefined;
    getPlagHamincha120MinutesZmanis() : /*i64*/bigint | undefined;
    getPlagHamincha16Point1Degrees() : /*i64*/bigint | undefined;
    getPlagHamincha18Degrees() : /*i64*/bigint | undefined;
    getPlagHamincha19Point8Degrees() : /*i64*/bigint | undefined;
    getPlagHamincha26Degrees() : /*i64*/bigint | undefined;
    getPlagHamincha60Minutes() : /*i64*/bigint | undefined;
    getPlagHamincha72Minutes() : /*i64*/bigint | undefined;
    getPlagHamincha72MinutesZmanis() : /*i64*/bigint | undefined;
    getPlagHamincha90Minutes() : /*i64*/bigint | undefined;
    getPlagHamincha90MinutesZmanis() : /*i64*/bigint | undefined;
    getPlagHamincha96Minutes() : /*i64*/bigint | undefined;
    getPlagHamincha96MinutesZmanis() : /*i64*/bigint | undefined;
    getPlagHaminchaAteretTorah() : /*i64*/bigint | undefined;
    getPlagHaminchaBaalHatanya() : /*i64*/bigint | undefined;
    getPlagHaminchaGraFixedLocalChatzosToSunset() : /*i64*/bigint | undefined;
    getSamuchLeMinchaKetana16Point1Degrees() : /*i64*/bigint | undefined;
    getSamuchLeMinchaKetana72Minutes() : /*i64*/bigint | undefined;
    getSamuchLeMinchaKetanaGra() : /*i64*/bigint | undefined;
    getShaahZmanis120Minutes() : /*i64*/bigint | undefined;
    getShaahZmanis120MinutesZmanis() : /*i64*/bigint | undefined;
    getShaahZmanis16Point1Degrees() : /*i64*/bigint | undefined;
    getShaahZmanis18Degrees() : /*i64*/bigint | undefined;
    getShaahZmanis19Point8Degrees() : /*i64*/bigint | undefined;
    getShaahZmanis26Degrees() : /*i64*/bigint | undefined;
    getShaahZmanis60Minutes() : /*i64*/bigint | undefined;
    getShaahZmanis72Minutes() : /*i64*/bigint | undefined;
    getShaahZmanis72MinutesZmanis() : /*i64*/bigint | undefined;
    getShaahZmanis90Minutes() : /*i64*/bigint | undefined;
    getShaahZmanis90MinutesZmanis() : /*i64*/bigint | undefined;
    getShaahZmanis96Minutes() : /*i64*/bigint | undefined;
    getShaahZmanis96MinutesZmanis() : /*i64*/bigint | undefined;
    getShaahZmanisAlos16Point1ToTzais3Point7() : /*i64*/bigint | undefined;
    getShaahZmanisAlos16Point1ToTzais3Point8() : /*i64*/bigint | undefined;
    getShaahZmanisAteretTorah() : /*i64*/bigint | undefined;
    getShaahZmanisBaalHatanya() : /*i64*/bigint | undefined;
    getSofZmanAchilasChametzBaalHatanya() : /*i64*/bigint | undefined;
    getSofZmanAchilasChametzGra() : /*i64*/bigint | undefined;
    getSofZmanAchilasChametzMga16Point1Degrees() : /*i64*/bigint | undefined;
    getSofZmanAchilasChametzMga72Minutes() : /*i64*/bigint | undefined;
    getSofZmanAchilasChametzMga72MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanBiurChametzBaalHatanya() : /*i64*/bigint | undefined;
    getSofZmanBiurChametzGra() : /*i64*/bigint | undefined;
    getSofZmanBiurChametzMga16Point1Degrees() : /*i64*/bigint | undefined;
    getSofZmanBiurChametzMga72Minutes() : /*i64*/bigint | undefined;
    getSofZmanBiurChametzMga72MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanKidushLevana15Days(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined) : /*i64*/bigint | undefined;
    getSofZmanKidushLevana15DaysDefault() : /*i64*/bigint | undefined;
    getSofZmanKidushLevanaBetweenMoldos(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined) : /*i64*/bigint | undefined;
    getSofZmanKidushLevanaBetweenMoldosDefault() : /*i64*/bigint | undefined;
    getSofZmanShma3HoursBeforeChatzos() : /*i64*/bigint | undefined;
    getSofZmanShmaAlos16Point1ToSunset() : /*i64*/bigint | undefined;
    getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees() : /*i64*/bigint | undefined;
    getSofZmanShmaAteretTorah() : /*i64*/bigint | undefined;
    getSofZmanShmaBaalHatanya() : /*i64*/bigint | undefined;
    getSofZmanShmaFixedLocal() : /*i64*/bigint | undefined;
    getSofZmanShmaGraSunriseToFixedLocalChatzos() : /*i64*/bigint | undefined;
    getSofZmanShmaKolEliyahu() : /*i64*/bigint | undefined;
    getSofZmanShmaMga120Minutes() : /*i64*/bigint | undefined;
    getSofZmanShmaMga16Point1Degrees() : /*i64*/bigint | undefined;
    getSofZmanShmaMga16Point1DegreesToFixedLocalChatzos() : /*i64*/bigint | undefined;
    getSofZmanShmaMga18Degrees() : /*i64*/bigint | undefined;
    getSofZmanShmaMga18DegreesToFixedLocalChatzos() : /*i64*/bigint | undefined;
    getSofZmanShmaMga19Point8Degrees() : /*i64*/bigint | undefined;
    getSofZmanShmaMga72Minutes() : /*i64*/bigint | undefined;
    getSofZmanShmaMga72MinutesToFixedLocalChatzos() : /*i64*/bigint | undefined;
    getSofZmanShmaMga72MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanShmaMga90Minutes() : /*i64*/bigint | undefined;
    getSofZmanShmaMga90MinutesToFixedLocalChatzos() : /*i64*/bigint | undefined;
    getSofZmanShmaMga90MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanShmaMga96Minutes() : /*i64*/bigint | undefined;
    getSofZmanShmaMga96MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanTfila2HoursBeforeChatzos() : /*i64*/bigint | undefined;
    getSofZmanTfilaAteretTorah() : /*i64*/bigint | undefined;
    getSofZmanTfilaBaalHatanya() : /*i64*/bigint | undefined;
    getSofZmanTfilaFixedLocal() : /*i64*/bigint | undefined;
    getSofZmanTfilaGraSunriseToFixedLocalChatzos() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga120Minutes() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga16Point1Degrees() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga18Degrees() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga19Point8Degrees() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga72Minutes() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga72MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga90Minutes() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga90MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga96Minutes() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga96MinutesZmanis() : /*i64*/bigint | undefined;
    getSofZmanTfilahAteretTorah() : /*i64*/bigint | undefined;
    getTchilasZmanKidushLevana3Days() : /*i64*/bigint | undefined;
    getTchilasZmanKidushLevana3DaysWithTimes(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined) : /*i64*/bigint | undefined;
    getTchilasZmanKidushLevana7Days(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined) : /*i64*/bigint | undefined;
    getTchilasZmanKidushLevana7DaysDefault() : /*i64*/bigint | undefined;
    getTzais120() : /*i64*/bigint | undefined;
    getTzais120Zmanis() : /*i64*/bigint | undefined;
    getTzais16Point1Degrees() : /*i64*/bigint | undefined;
    getTzais18Degrees() : /*i64*/bigint | undefined;
    getTzais19Point8Degrees() : /*i64*/bigint | undefined;
    getTzais26Degrees() : /*i64*/bigint | undefined;
    getTzais50() : /*i64*/bigint | undefined;
    getTzais60() : /*i64*/bigint | undefined;
    getTzais72Zmanis() : /*i64*/bigint | undefined;
    getTzais90() : /*i64*/bigint | undefined;
    getTzais90Zmanis() : /*i64*/bigint | undefined;
    getTzais96() : /*i64*/bigint | undefined;
    getTzais96Zmanis() : /*i64*/bigint | undefined;
    getTzaisAteretTorah() : /*i64*/bigint | undefined;
    getTzaisBaalHatanya() : /*i64*/bigint | undefined;
    getTzaisGeonim3Point65Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim3Point676Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim3Point7Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim3Point8Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim4Point37Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim4Point61Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim4Point8Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim5Point88Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim5Point95Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim6Point45Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim7Point083Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim7Point67Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim8Point5Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim9Point3Degrees() : /*i64*/bigint | undefined;
    getTzaisGeonim9Point75Degrees() : /*i64*/bigint | undefined;
    getUseAstronomicalChatzos() : boolean;
    getUseAstronomicalChatzosForOtherZmanim() : boolean;
    getZmanMolad() : /*i64*/bigint | undefined;
}


export class ComplexZmanimCalendar extends UniffiAbstractObject implements ComplexZmanimCalendarInterface {

    readonly [uniffiTypeNameSymbol] = "ComplexZmanimCalendar";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeComplexZmanimCalendarObjectFactory.bless(pointer);
}

    

    
public getAlos120(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_120(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos120Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_120_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos18Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_18_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos19Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_19_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos19Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_19_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos26Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_26_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos60(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_60(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos72Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_72_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos90(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_90(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos90Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_90_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos96(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_96(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos96Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_96_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlosBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_alos_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAstronomicalCalendar(): AstronomicalCalendarInterface {
    return FfiConverterTypeAstronomicalCalendar.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_astronomical_calendar(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAteretTorahSunsetOffset(): /*i64*/bigint {
    return FfiConverterInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_ateret_torah_sunset_offset(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosRt13Point24Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_rt_13_point_24_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosRt13Point5MinutesBefore7Point083Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_rt_13_point_5_minutes_before_7_point_083_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosRt2Stars(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_rt_2_stars(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosRt58Point5Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_rt_58_point_5_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosYereim13Point5Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_yereim_13_point_5_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosYereim16Point875Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_yereim_16_point_875_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosYereim18Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_yereim_18_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosYereim2Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_yereim_2_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosYereim2Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_yereim_2_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHashmashosYereim3Point05Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hashmashos_yereim_3_point_05_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosrt13Point24Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosrt_13_point_24_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosrt13Point5MinutesBefore7Point083Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosrt_13_point_5_minutes_before_7_point_083_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosrt2Stars(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosrt_2_stars(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosrt58Point5Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosrt_58_point_5_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosyereim13Point5Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosyereim_13_point_5_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosyereim16Point875Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosyereim_16_point_875_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosyereim18Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosyereim_18_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosyereim2Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosyereim_2_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosyereim2Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosyereim_2_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getBainHasmashosyereim3Point05Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_bain_hasmashosyereim_3_point_05_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getCandleLightingOffset(): /*i64*/bigint {
    return FfiConverterInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_candle_lighting_offset(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getFixedLocalChatzosBasedZmanim(startOfHalfDay: /*i64*/bigint, endOfHalfDay: /*i64*/bigint, hours: /*f64*/number): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_fixed_local_chatzos_based_zmanim(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfHalfDay),
        FfiConverterInt64.lower(endOfHalfDay),
        FfiConverterFloat64.lower(hours),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedola16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedola30Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_30_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedola72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaAhavatShalom(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_ahavat_shalom(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaBaalHatanyaGreaterThan30(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_baal_hatanya_greater_than_30(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaGraFixedLocalChatzos30Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_gra_fixed_local_chatzos_30_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaGreaterThan30(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_gedola_greater_than_30(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetana16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_ketana_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetana72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_ketana_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetanaAhavatShalom(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_ketana_ahavat_shalom(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetanaAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_ketana_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetanaBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_ketana_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetanaGraFixedLocalChatzosToSunset(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_mincha_ketana_gra_fixed_local_chatzos_to_sunset(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMisheyakir10Point2Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_misheyakir_10_point_2_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMisheyakir11Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_misheyakir_11_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMisheyakir11Point5Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_misheyakir_11_point_5_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMisheyakir7Point65Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_misheyakir_7_point_65_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMisheyakir9Point5Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_misheyakir_9_point_5_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagAhavatShalom(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_ahavat_shalom(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagAlos16Point1ToTzaisGeonim7Point083Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_alos_16_point_1_to_tzais_geonim_7_point_083_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagAlosToSunset(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_alos_to_sunset(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha120Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_120_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha120MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_120_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha18Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_18_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha19Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_19_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha26Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_26_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha60Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_60_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha72MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_72_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha90Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_90_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha90MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_90_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha96Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_96_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha96MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_96_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHaminchaAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHaminchaBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHaminchaGraFixedLocalChatzosToSunset(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_plag_hamincha_gra_fixed_local_chatzos_to_sunset(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSamuchLeMinchaKetana16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSamuchLeMinchaKetana72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSamuchLeMinchaKetanaGra(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_gra(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis120Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_120_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis120MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_120_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis18Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_18_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis19Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_19_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis26Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_26_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis60Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_60_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis72MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_72_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis90Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_90_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis90MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_90_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis96Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_96_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanis96MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_96_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisAlos16Point1ToTzais3Point7(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_alos_16_point_1_to_tzais_3_point_7(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisAlos16Point1ToTzais3Point8(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_alos_16_point_1_to_tzais_3_point_8(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_shaah_zmanis_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanAchilasChametzBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanAchilasChametzGra(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_gra(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanAchilasChametzMga16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanAchilasChametzMga72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanAchilasChametzMga72MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_72_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanBiurChametzBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_biur_chametz_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanBiurChametzGra(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_biur_chametz_gra(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanBiurChametzMga16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanBiurChametzMga72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanBiurChametzMga72MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_72_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanKidushLevana15Days(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_kidush_levana_15_days(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(alos),
        FfiConverterOptionalInt64.lower(tzais),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanKidushLevana15DaysDefault(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_kidush_levana_15_days_default(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanKidushLevanaBetweenMoldos(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_kidush_levana_between_moldos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(alos),
        FfiConverterOptionalInt64.lower(tzais),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanKidushLevanaBetweenMoldosDefault(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_kidush_levana_between_moldos_default(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShma3HoursBeforeChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_3_hours_before_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaAlos16Point1ToSunset(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_alos_16_point_1_to_sunset(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaAlos16Point1ToTzaisGeonim7Point083Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_alos_16_point_1_to_tzais_geonim_7_point_083_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaFixedLocal(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_fixed_local(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaGraSunriseToFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_gra_sunrise_to_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaKolEliyahu(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_kol_eliyahu(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga120Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_120_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga16Point1DegreesToFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_16_point_1_degrees_to_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga18Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_18_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga18DegreesToFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_18_degrees_to_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga19Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_19_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga72MinutesToFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes_to_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga72MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga90Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga90MinutesToFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes_to_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga90MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga96Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_96_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga96MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_shma_mga_96_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfila2HoursBeforeChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_2_hours_before_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaFixedLocal(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_fixed_local(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaGraSunriseToFixedLocalChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_gra_sunrise_to_fixed_local_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga120Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_120_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga18Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_18_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga19Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_19_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga72Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_72_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga72MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_72_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga90Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_90_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga90MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_90_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga96Minutes(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_96_minutes(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga96MinutesZmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfila_mga_96_minutes_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilahAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_sof_zman_tfilah_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTchilasZmanKidushLevana3Days(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_3_days(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTchilasZmanKidushLevana3DaysWithTimes(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_3_days_with_times(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(alos),
        FfiConverterOptionalInt64.lower(tzais),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTchilasZmanKidushLevana7Days(alos: /*i64*/bigint | undefined, tzais: /*i64*/bigint | undefined): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_7_days(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(alos),
        FfiConverterOptionalInt64.lower(tzais),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTchilasZmanKidushLevana7DaysDefault(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_7_days_default(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais120(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_120(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais120Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_120_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais16Point1Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_16_point_1_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais18Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_18_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais19Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_19_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais26Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_26_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais50(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_50(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais60(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_60(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais72Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_72_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais90(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_90(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais90Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_90_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais96(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_96(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais96Zmanis(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_96_zmanis(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisAteretTorah(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_ateret_torah(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisBaalHatanya(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_baal_hatanya(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim3Point65Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_3_point_65_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim3Point676Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_3_point_676_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim3Point7Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_3_point_7_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim3Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_3_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim4Point37Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_4_point_37_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim4Point61Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_4_point_61_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim4Point8Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_4_point_8_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim5Point88Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_5_point_88_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim5Point95Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_5_point_95_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim6Point45Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_6_point_45_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim7Point083Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_7_point_083_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim7Point67Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_7_point_67_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim8Point5Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_8_point_5_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim9Point3Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_9_point_3_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzaisGeonim9Point75Degrees(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_tzais_geonim_9_point_75_degrees(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUseAstronomicalChatzos(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_use_astronomical_chatzos(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUseAstronomicalChatzosForOtherZmanim(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_use_astronomical_chatzos_for_other_zmanim(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getZmanMolad(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_complexzmanimcalendar_get_zman_molad(uniffiTypeComplexZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeComplexZmanimCalendarObjectFactory.pointer(this);
            uniffiTypeComplexZmanimCalendarObjectFactory.freePointer(pointer);
            uniffiTypeComplexZmanimCalendarObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is ComplexZmanimCalendar {
        return uniffiTypeComplexZmanimCalendarObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeComplexZmanimCalendarObjectFactory: UniffiObjectFactory<ComplexZmanimCalendarInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeComplexZmanimCalendarObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): ComplexZmanimCalendarInterface {
        const instance = Object.create(ComplexZmanimCalendar.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "ComplexZmanimCalendar";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: ComplexZmanimCalendarInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: ComplexZmanimCalendarInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_complexzmanimcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_complexzmanimcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is ComplexZmanimCalendarInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "ComplexZmanimCalendar";
    },
}})();
// FfiConverter for ComplexZmanimCalendarInterface
const FfiConverterTypeComplexZmanimCalendar =  new FfiConverterObject(uniffiTypeComplexZmanimCalendarObjectFactory);


export interface GeoLocationInterface {
    
    geodesicDistance(location: GeoLocationInterface) : /*f64*/number | undefined;
    geodesicFinalBearing(location: GeoLocationInterface) : /*f64*/number | undefined;
    geodesicInitialBearing(location: GeoLocationInterface) : /*f64*/number | undefined;
    getElevation() : /*f64*/number;
    getLatitude() : /*f64*/number;
    getLongitude() : /*f64*/number;
    rhumbLineBearing(location: GeoLocationInterface) : /*f64*/number;
    rhumbLineDistance(location: GeoLocationInterface) : /*f64*/number;
    vincentyInverseFormula(location: GeoLocationInterface, formula: Formula) : /*f64*/number | undefined;
}


export class GeoLocation extends UniffiAbstractObject implements GeoLocationInterface {

    readonly [uniffiTypeNameSymbol] = "GeoLocation";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeGeoLocationObjectFactory.bless(pointer);
}

    

    
public geodesicDistance(location: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_geodesic_distance(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
        FfiConverterTypeGeoLocation.lower(location),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public geodesicFinalBearing(location: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_geodesic_final_bearing(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
        FfiConverterTypeGeoLocation.lower(location),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public geodesicInitialBearing(location: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_geodesic_initial_bearing(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
        FfiConverterTypeGeoLocation.lower(location),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getElevation(): /*f64*/number {
    return FfiConverterFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_get_elevation(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getLatitude(): /*f64*/number {
    return FfiConverterFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_get_latitude(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getLongitude(): /*f64*/number {
    return FfiConverterFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_get_longitude(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public rhumbLineBearing(location: GeoLocationInterface): /*f64*/number {
    return FfiConverterFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_rhumb_line_bearing(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
        FfiConverterTypeGeoLocation.lower(location),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public rhumbLineDistance(location: GeoLocationInterface): /*f64*/number {
    return FfiConverterFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_rhumb_line_distance(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
        FfiConverterTypeGeoLocation.lower(location),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public vincentyInverseFormula(location: GeoLocationInterface, formula: Formula): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_geolocation_vincenty_inverse_formula(uniffiTypeGeoLocationObjectFactory.clonePointer(this), 
        FfiConverterTypeGeoLocation.lower(location),
        FfiConverterTypeFormula.lower(formula),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeGeoLocationObjectFactory.pointer(this);
            uniffiTypeGeoLocationObjectFactory.freePointer(pointer);
            uniffiTypeGeoLocationObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is GeoLocation {
        return uniffiTypeGeoLocationObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeGeoLocationObjectFactory: UniffiObjectFactory<GeoLocationInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeGeoLocationObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): GeoLocationInterface {
        const instance = Object.create(GeoLocation.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "GeoLocation";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: GeoLocationInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: GeoLocationInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_geolocation(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_geolocation(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is GeoLocationInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "GeoLocation";
    },
}})();
// FfiConverter for GeoLocationInterface
const FfiConverterTypeGeoLocation =  new FfiConverterObject(uniffiTypeGeoLocationObjectFactory);


export interface JewishCalendarInterface {
    
    getBavliDafYomi() : BavliDafInterface | undefined;
    getDayOfChanukah() : /*i32*/number;
    getDayOfOmer() : /*i32*/number;
    getInIsrael() : boolean;
    getJewishDate() : JewishDateInterface;
    getParshah() : Parsha;
    getUseModernHolidays() : boolean;
    getYomTovIndex() : JewishHoliday | undefined;
    hasCandleLighting() : boolean;
    isAseresYemeiTeshuva() : boolean;
    isAssurBemelacha() : boolean;
    isChanukah() : boolean;
    isCholHamoed() : boolean;
    isCholHamoedPesach() : boolean;
    isCholHamoedSuccos() : boolean;
    isErevYomTov() : boolean;
    isErevYomTovSheni() : boolean;
    isHoshanaRabba() : boolean;
    isIsruChag() : boolean;
    isPesach() : boolean;
    isPurim() : boolean;
    isRoshChodesh() : boolean;
    isRoshHashana() : boolean;
    isShavuos() : boolean;
    isSheminiAtzeres() : boolean;
    isSimchasTorah() : boolean;
    isSuccos() : boolean;
    isTaanis() : boolean;
    isTaanisBechoros() : boolean;
    isTishaBeav() : boolean;
    isTomorrowShabbosOrYomTov() : boolean;
    isYomKippur() : boolean;
    isYomTov() : boolean;
    isYomTovAssurBemelacha() : boolean;
}


export class JewishCalendar extends UniffiAbstractObject implements JewishCalendarInterface {

    readonly [uniffiTypeNameSymbol] = "JewishCalendar";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeJewishCalendarObjectFactory.bless(pointer);
}

    

    
public getBavliDafYomi(): BavliDafInterface | undefined {
    return FfiConverterOptionalTypeBavliDaf.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_bavli_daf_yomi(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getDayOfChanukah(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_day_of_chanukah(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getDayOfOmer(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_day_of_omer(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getInIsrael(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_in_israel(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getJewishDate(): JewishDateInterface {
    return FfiConverterTypeJewishDate.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_jewish_date(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getParshah(): Parsha {
    return FfiConverterTypeParsha.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_parshah(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUseModernHolidays(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_use_modern_holidays(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getYomTovIndex(): JewishHoliday | undefined {
    return FfiConverterOptionalTypeJewishHoliday.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_get_yom_tov_index(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public hasCandleLighting(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_has_candle_lighting(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isAseresYemeiTeshuva(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_aseres_yemei_teshuva(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isAssurBemelacha(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_assur_bemelacha(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isChanukah(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_chanukah(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isCholHamoed(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_chol_hamoed(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isCholHamoedPesach(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_chol_hamoed_pesach(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isCholHamoedSuccos(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_chol_hamoed_succos(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isErevYomTov(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_erev_yom_tov(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isErevYomTovSheni(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_erev_yom_tov_sheni(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isHoshanaRabba(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_hoshana_rabba(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isIsruChag(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_isru_chag(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isPesach(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_pesach(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isPurim(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_purim(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isRoshChodesh(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_rosh_chodesh(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isRoshHashana(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_rosh_hashana(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isShavuos(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_shavuos(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isSheminiAtzeres(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_shemini_atzeres(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isSimchasTorah(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_simchas_torah(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isSuccos(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_succos(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isTaanis(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_taanis(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isTaanisBechoros(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_taanis_bechoros(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isTishaBeav(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_tisha_beav(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isTomorrowShabbosOrYomTov(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_tomorrow_shabbos_or_yom_tov(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isYomKippur(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_yom_kippur(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isYomTov(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_yom_tov(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isYomTovAssurBemelacha(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishcalendar_is_yom_tov_assur_bemelacha(uniffiTypeJewishCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeJewishCalendarObjectFactory.pointer(this);
            uniffiTypeJewishCalendarObjectFactory.freePointer(pointer);
            uniffiTypeJewishCalendarObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is JewishCalendar {
        return uniffiTypeJewishCalendarObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeJewishCalendarObjectFactory: UniffiObjectFactory<JewishCalendarInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeJewishCalendarObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): JewishCalendarInterface {
        const instance = Object.create(JewishCalendar.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "JewishCalendar";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: JewishCalendarInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: JewishCalendarInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_jewishcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_jewishcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is JewishCalendarInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "JewishCalendar";
    },
}})();
// FfiConverter for JewishCalendarInterface
const FfiConverterTypeJewishCalendar =  new FfiConverterObject(uniffiTypeJewishCalendarObjectFactory);


export interface JewishDateInterface {
    
    getChalakimSinceMoladTohu() : /*i64*/bigint;
    getCheshvanKislevKviah() : YearLengthType;
    getDayOfWeek() : DayOfWeek;
    getDaysInJewishMonth() : /*i32*/number;
    getDaysInJewishYear() : /*i32*/number;
    getDaysSinceStartOfJewishYear() : /*i32*/number;
    getGregorianDayOfMonth() : /*i32*/number;
    getGregorianMonth() : /*i32*/number;
    getGregorianYear() : /*i32*/number;
    getJewishDayOfMonth() : /*i32*/number;
    getJewishMonth() : JewishMonth;
    getJewishYear() : /*i32*/number;
    getMoladData() : MoladDataInterface | undefined;
    getMoladDate() : JewishDateInterface | undefined;
    isCheshvanLong() : boolean;
    isJewishLeapYear() : boolean;
    isKislevShort() : boolean;
}


export class JewishDate extends UniffiAbstractObject implements JewishDateInterface {

    readonly [uniffiTypeNameSymbol] = "JewishDate";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeJewishDateObjectFactory.bless(pointer);
}

    

    
public getChalakimSinceMoladTohu(): /*i64*/bigint {
    return FfiConverterInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_chalakim_since_molad_tohu(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getCheshvanKislevKviah(): YearLengthType {
    return FfiConverterTypeYearLengthType.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_cheshvan_kislev_kviah(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getDayOfWeek(): DayOfWeek {
    return FfiConverterTypeDayOfWeek.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_day_of_week(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getDaysInJewishMonth(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_days_in_jewish_month(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getDaysInJewishYear(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_days_in_jewish_year(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getDaysSinceStartOfJewishYear(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_days_since_start_of_jewish_year(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getGregorianDayOfMonth(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_gregorian_day_of_month(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getGregorianMonth(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_gregorian_month(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getGregorianYear(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_gregorian_year(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getJewishDayOfMonth(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_jewish_day_of_month(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getJewishMonth(): JewishMonth {
    return FfiConverterTypeJewishMonth.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_jewish_month(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getJewishYear(): /*i32*/number {
    return FfiConverterInt32.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_jewish_year(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMoladData(): MoladDataInterface | undefined {
    return FfiConverterOptionalTypeMoladData.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_molad_data(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMoladDate(): JewishDateInterface | undefined {
    return FfiConverterOptionalTypeJewishDate.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_get_molad_date(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isCheshvanLong(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_is_cheshvan_long(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isJewishLeapYear(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_is_jewish_leap_year(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public isKislevShort(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_jewishdate_is_kislev_short(uniffiTypeJewishDateObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeJewishDateObjectFactory.pointer(this);
            uniffiTypeJewishDateObjectFactory.freePointer(pointer);
            uniffiTypeJewishDateObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is JewishDate {
        return uniffiTypeJewishDateObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeJewishDateObjectFactory: UniffiObjectFactory<JewishDateInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeJewishDateObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): JewishDateInterface {
        const instance = Object.create(JewishDate.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "JewishDate";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: JewishDateInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: JewishDateInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_jewishdate(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_jewishdate(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is JewishDateInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "JewishDate";
    },
}})();
// FfiConverter for JewishDateInterface
const FfiConverterTypeJewishDate =  new FfiConverterObject(uniffiTypeJewishDateObjectFactory);


export interface MoladDataInterface {
    
}


export class MoladData extends UniffiAbstractObject implements MoladDataInterface {

    readonly [uniffiTypeNameSymbol] = "MoladData";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeMoladDataObjectFactory.bless(pointer);
}

    

    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeMoladDataObjectFactory.pointer(this);
            uniffiTypeMoladDataObjectFactory.freePointer(pointer);
            uniffiTypeMoladDataObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is MoladData {
        return uniffiTypeMoladDataObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeMoladDataObjectFactory: UniffiObjectFactory<MoladDataInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeMoladDataObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): MoladDataInterface {
        const instance = Object.create(MoladData.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "MoladData";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: MoladDataInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: MoladDataInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_moladdata(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_moladdata(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is MoladDataInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "MoladData";
    },
}})();
// FfiConverter for MoladDataInterface
const FfiConverterTypeMoladData =  new FfiConverterObject(uniffiTypeMoladDataObjectFactory);


export interface NoaaCalculatorInterface {
    
    getSolarAzimuth(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface) : /*f64*/number | undefined;
    getSolarElevation(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface) : /*f64*/number | undefined;
    getUtcMidnight(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface) : /*f64*/number | undefined;
    getUtcNoon(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface) : /*f64*/number | undefined;
    getUtcSunrise(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface, zenith: /*f64*/number, adjustForElevation: boolean) : /*f64*/number | undefined;
    getUtcSunset(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface, zenith: /*f64*/number, adjustForElevation: boolean) : /*f64*/number | undefined;
}


export class NoaaCalculator extends UniffiAbstractObject implements NoaaCalculatorInterface {

    readonly [uniffiTypeNameSymbol] = "NoaaCalculator";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeNoaaCalculatorObjectFactory.bless(pointer);
}

    

    
public getSolarAzimuth(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_noaacalculator_get_solar_azimuth(uniffiTypeNoaaCalculatorObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSolarElevation(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_noaacalculator_get_solar_elevation(uniffiTypeNoaaCalculatorObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcMidnight(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_noaacalculator_get_utc_midnight(uniffiTypeNoaaCalculatorObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcNoon(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_noaacalculator_get_utc_noon(uniffiTypeNoaaCalculatorObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcSunrise(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface, zenith: /*f64*/number, adjustForElevation: boolean): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_noaacalculator_get_utc_sunrise(uniffiTypeNoaaCalculatorObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
        FfiConverterFloat64.lower(zenith),
        FfiConverterBool.lower(adjustForElevation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUtcSunset(timestamp: /*i64*/bigint, geoLocation: GeoLocationInterface, zenith: /*f64*/number, adjustForElevation: boolean): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_noaacalculator_get_utc_sunset(uniffiTypeNoaaCalculatorObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(timestamp),
        FfiConverterTypeGeoLocation.lower(geoLocation),
        FfiConverterFloat64.lower(zenith),
        FfiConverterBool.lower(adjustForElevation),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeNoaaCalculatorObjectFactory.pointer(this);
            uniffiTypeNoaaCalculatorObjectFactory.freePointer(pointer);
            uniffiTypeNoaaCalculatorObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is NoaaCalculator {
        return uniffiTypeNoaaCalculatorObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeNoaaCalculatorObjectFactory: UniffiObjectFactory<NoaaCalculatorInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeNoaaCalculatorObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): NoaaCalculatorInterface {
        const instance = Object.create(NoaaCalculator.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "NoaaCalculator";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: NoaaCalculatorInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: NoaaCalculatorInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_noaacalculator(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_noaacalculator(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is NoaaCalculatorInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "NoaaCalculator";
    },
}})();
// FfiConverter for NoaaCalculatorInterface
const FfiConverterTypeNOAACalculator =  new FfiConverterObject(uniffiTypeNoaaCalculatorObjectFactory);


export interface ZmanimCalendarInterface {
    
    getMinchaGedola(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean) : /*i64*/bigint | undefined;
    getMinchaKetana(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean) : /*i64*/bigint | undefined;
    getPlagHamincha(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean) : /*i64*/bigint | undefined;
    getSamuchLeMinchaKetana(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean) : /*i64*/bigint | undefined;
    getSofZmanShma(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint | undefined, synchronous: boolean) : /*i64*/bigint | undefined;
    getSofZmanTfila(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint | undefined, synchronous: boolean) : /*i64*/bigint | undefined;
    getAlos72() : /*i64*/bigint | undefined;
    getAlosHashachar() : /*i64*/bigint | undefined;
    getAstronomicalCalendar() : AstronomicalCalendarInterface;
    getCandleLighting() : /*i64*/bigint | undefined;
    getCandleLightingOffset() : /*i64*/bigint;
    getChatzos() : /*i64*/bigint | undefined;
    getChatzosAsHalfDay() : /*i64*/bigint | undefined;
    getHalfDayBasedShaahZmanis(startOfHalfDay: /*i64*/bigint, endOfHalfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getHalfDayBasedZman(startOfHalfDay: /*i64*/bigint, endOfHalfDay: /*i64*/bigint, hours: /*f64*/number) : /*i64*/bigint | undefined;
    getMinchaGedolaDefault() : /*i64*/bigint | undefined;
    getMinchaGedolaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getMinchaKetanaDefault() : /*i64*/bigint | undefined;
    getMinchaKetanaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getPercentOfShaahZmanisFromDegrees(degrees: /*f64*/number, sunset: boolean) : /*f64*/number | undefined;
    getPlagHaminchaDefault() : /*i64*/bigint | undefined;
    getPlagHaminchaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getSamuchLeMinchaKetanaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getShaahZmanisBasedZman(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint, hours: /*f64*/number) : /*i64*/bigint | undefined;
    getShaahZmanisGra() : /*i64*/bigint | undefined;
    getShaahZmanisMga() : /*i64*/bigint | undefined;
    getSofZmanShmaGra() : /*i64*/bigint | undefined;
    getSofZmanShmaMga() : /*i64*/bigint | undefined;
    getSofZmanShmaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getSofZmanTfilaGra() : /*i64*/bigint | undefined;
    getSofZmanTfilaMga() : /*i64*/bigint | undefined;
    getSofZmanTfilaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint) : /*i64*/bigint | undefined;
    getTzais() : /*i64*/bigint | undefined;
    getTzais72() : /*i64*/bigint | undefined;
    getUseAstronomicalChatzos() : boolean;
    getUseAstronomicalChatzosForOtherZmanim() : boolean;
}


export class ZmanimCalendar extends UniffiAbstractObject implements ZmanimCalendarInterface {

    readonly [uniffiTypeNameSymbol] = "ZmanimCalendar";
    readonly [destructorGuardSymbol]: UniffiRustArcPtr;
    readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
    // No primary constructor declared for this class.
private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeZmanimCalendarObjectFactory.bless(pointer);
}

    

    
public getMinchaGedola(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar__get_mincha_gedola(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
        FfiConverterBool.lower(synchronous),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetana(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar__get_mincha_ketana(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
        FfiConverterBool.lower(synchronous),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHamincha(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar__get_plag_hamincha(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
        FfiConverterBool.lower(synchronous),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSamuchLeMinchaKetana(startOfDay: /*i64*/bigint | undefined, endOfDay: /*i64*/bigint, synchronous: boolean): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar__get_samuch_le_mincha_ketana(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterOptionalInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
        FfiConverterBool.lower(synchronous),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShma(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint | undefined, synchronous: boolean): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar__get_sof_zman_shma(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterOptionalInt64.lower(endOfDay),
        FfiConverterBool.lower(synchronous),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfila(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint | undefined, synchronous: boolean): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar__get_sof_zman_tfila(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterOptionalInt64.lower(endOfDay),
        FfiConverterBool.lower(synchronous),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlos72(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_alos72(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAlosHashachar(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_alos_hashachar(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getAstronomicalCalendar(): AstronomicalCalendarInterface {
    return FfiConverterTypeAstronomicalCalendar.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_astronomical_calendar(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getCandleLighting(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_candle_lighting(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getCandleLightingOffset(): /*i64*/bigint {
    return FfiConverterInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_candle_lighting_offset(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getChatzos(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_chatzos(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getChatzosAsHalfDay(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_chatzos_as_half_day(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getHalfDayBasedShaahZmanis(startOfHalfDay: /*i64*/bigint, endOfHalfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_half_day_based_shaah_zmanis(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfHalfDay),
        FfiConverterInt64.lower(endOfHalfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getHalfDayBasedZman(startOfHalfDay: /*i64*/bigint, endOfHalfDay: /*i64*/bigint, hours: /*f64*/number): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_half_day_based_zman(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfHalfDay),
        FfiConverterInt64.lower(endOfHalfDay),
        FfiConverterFloat64.lower(hours),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaDefault(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_mincha_gedola_default(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaGedolaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_mincha_gedola_simple(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetanaDefault(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_mincha_ketana_default(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getMinchaKetanaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_mincha_ketana_simple(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPercentOfShaahZmanisFromDegrees(degrees: /*f64*/number, sunset: boolean): /*f64*/number | undefined {
    return FfiConverterOptionalFloat64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_percent_of_shaah_zmanis_from_degrees(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterFloat64.lower(degrees),
        FfiConverterBool.lower(sunset),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHaminchaDefault(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_plag_hamincha_default(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getPlagHaminchaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_plag_hamincha_simple(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSamuchLeMinchaKetanaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_samuch_le_mincha_ketana_simple(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisBasedZman(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint, hours: /*f64*/number): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_shaah_zmanis_based_zman(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
        FfiConverterFloat64.lower(hours),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisGra(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_shaah_zmanis_gra(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getShaahZmanisMga(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_shaah_zmanis_mga(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaGra(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_sof_zman_shma_gra(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaMga(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_sof_zman_shma_mga(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanShmaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_sof_zman_shma_simple(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaGra(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_sof_zman_tfila_gra(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaMga(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_sof_zman_tfila_mga(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getSofZmanTfilaSimple(startOfDay: /*i64*/bigint, endOfDay: /*i64*/bigint): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_sof_zman_tfila_simple(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
        FfiConverterInt64.lower(startOfDay),
        FfiConverterInt64.lower(endOfDay),
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_tzais(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getTzais72(): /*i64*/bigint | undefined {
    return FfiConverterOptionalInt64.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_tzais72(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUseAstronomicalChatzos(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_use_astronomical_chatzos(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    
public getUseAstronomicalChatzosForOtherZmanim(): boolean {
    return FfiConverterBool.lift(uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => {
                return nativeModule().ubrn_uniffi_zmanim_core_fn_method_zmanimcalendar_get_use_astronomical_chatzos_for_other_zmanim(uniffiTypeZmanimCalendarObjectFactory.clonePointer(this), 
                callStatus);
            },
            /*liftString:*/ FfiConverterString.lift,
    ));
    }
    

    /**
     * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
     */
    uniffiDestroy(): void {
        const ptr = (this as any)[destructorGuardSymbol];
        if (ptr !== undefined) {
            const pointer = uniffiTypeZmanimCalendarObjectFactory.pointer(this);
            uniffiTypeZmanimCalendarObjectFactory.freePointer(pointer);
            uniffiTypeZmanimCalendarObjectFactory.unbless(ptr);
            delete (this as any)[destructorGuardSymbol];
        }
    }

    static instanceOf(obj: any): obj is ZmanimCalendar {
        return uniffiTypeZmanimCalendarObjectFactory.isConcreteType(obj);
    }

    
}

const uniffiTypeZmanimCalendarObjectFactory: UniffiObjectFactory<ZmanimCalendarInterface> = (() => {
    
    /// <reference lib="es2021" />
    const registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistry<UnsafeMutableRawPointer>((heldValue: UnsafeMutableRawPointer) => {
        uniffiTypeZmanimCalendarObjectFactory.freePointer(heldValue);
    }) : null;
    
    return {
    create(pointer: UnsafeMutableRawPointer): ZmanimCalendarInterface {
        const instance = Object.create(ZmanimCalendar.prototype);
        instance[pointerLiteralSymbol] = pointer;
        instance[destructorGuardSymbol] = this.bless(pointer);
        instance[uniffiTypeNameSymbol] = "ZmanimCalendar";
        return instance;
    },

    
    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
        const ptr = {
            p, // make sure this object doesn't get optimized away.
            markDestroyed: () => undefined,
        };
        if (registry) {
            registry.register(ptr, p, ptr);
        }
        return ptr;
    },

    unbless(ptr: UniffiRustArcPtr) {
        if (registry) {
            registry.unregister(ptr);
        }
    },

    pointer(obj: ZmanimCalendarInterface): UnsafeMutableRawPointer {
        if ((obj as any)[destructorGuardSymbol] === undefined) {
            throw new UniffiInternalError.UnexpectedNullPointer();
        }
        return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: ZmanimCalendarInterface): UnsafeMutableRawPointer {
        const pointer = this.pointer(obj);
        return uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_clone_zmanimcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
        uniffiCaller.rustCall(
            /*caller:*/ (callStatus) => nativeModule().ubrn_uniffi_zmanim_core_fn_free_zmanimcalendar(pointer, callStatus),
            /*liftString:*/ FfiConverterString.lift
        );
    },

    isConcreteType(obj: any): obj is ZmanimCalendarInterface {
        return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === "ZmanimCalendar";
    },
}})();
// FfiConverter for ZmanimCalendarInterface
const FfiConverterTypeZmanimCalendar =  new FfiConverterObject(uniffiTypeZmanimCalendarObjectFactory);


// FfiConverter for /*f64*/number | undefined
const FfiConverterOptionalFloat64 = new FfiConverterOptional(FfiConverterFloat64);


// FfiConverter for /*i64*/bigint | undefined
const FfiConverterOptionalInt64 = new FfiConverterOptional(FfiConverterInt64);


// FfiConverter for JewishHoliday | undefined
const FfiConverterOptionalTypeJewishHoliday = new FfiConverterOptional(FfiConverterTypeJewishHoliday);


// FfiConverter for BavliDafInterface | undefined
const FfiConverterOptionalTypeBavliDaf = new FfiConverterOptional(FfiConverterTypeBavliDaf);


// FfiConverter for GeoLocationInterface | undefined
const FfiConverterOptionalTypeGeoLocation = new FfiConverterOptional(FfiConverterTypeGeoLocation);


// FfiConverter for JewishDateInterface | undefined
const FfiConverterOptionalTypeJewishDate = new FfiConverterOptional(FfiConverterTypeJewishDate);


// FfiConverter for MoladDataInterface | undefined
const FfiConverterOptionalTypeMoladData = new FfiConverterOptional(FfiConverterTypeMoladData);



/**
 * This should be called before anything else.
 *
 * It is likely that this is being done for you by the library's `index.ts`.
 *
 * It checks versions of uniffi between when the Rust scaffolding was generated
 * and when the bindings were generated.
 *
 * It also initializes the machinery to enable Rust to talk back to Javascript.
 */
function uniffiEnsureInitialized() {
    // Get the bindings contract version from our ComponentInterface
    const bindingsContractVersion = 29;
    // Get the scaffolding contract version by calling the into the dylib
    const scaffoldingContractVersion = nativeModule().ubrn_ffi_zmanim_core_uniffi_contract_version();
    if (bindingsContractVersion !== scaffoldingContractVersion) {
        throw new UniffiInternalError.ContractVersionMismatch(scaffoldingContractVersion, bindingsContractVersion);
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_func_new_astronomical_calendar() !== 41832) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_func_new_astronomical_calendar");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_func_new_complex_zmanim_calendar() !== 15780) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_func_new_complex_zmanim_calendar");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_func_new_geolocation() !== 28616) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_func_new_geolocation");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_func_new_jewish_date() !== 23873) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_func_new_jewish_date");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_func_new_noaa_calculator() !== 1127) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_func_new_noaa_calculator");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_func_new_zmanim_calendar() !== 19700) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_func_new_zmanim_calendar");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_begin_astronomical_twilight() !== 62489) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_begin_astronomical_twilight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_begin_civil_twilight() !== 56856) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_begin_civil_twilight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_begin_nautical_twilight() !== 60352) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_begin_nautical_twilight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_end_astronomical_twilight() !== 7254) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_end_astronomical_twilight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_end_civil_twilight() !== 53502) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_end_civil_twilight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_end_nautical_twilight() !== 7547) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_end_nautical_twilight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_geo_location() !== 8696) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_geo_location");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_noaa_calculator() !== 20877) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_noaa_calculator");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sea_level_sunrise() !== 64373) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sea_level_sunrise");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sea_level_sunset() !== 39697) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sea_level_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_solar_midnight() !== 11473) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_solar_midnight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sun_transit() !== 33500) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sun_transit");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sun_transit_with_start_and_end_times() !== 18808) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sun_transit_with_start_and_end_times");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunrise() !== 26285) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunrise");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunrise_offset_by_degrees() !== 63651) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunrise_offset_by_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunset() !== 36772) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunset_offset_by_degrees() !== 31916) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_sunset_offset_by_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_temporal_hour() !== 50743) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_temporal_hour");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_temporal_hour_with_start_and_end_times() !== 49651) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_temporal_hour_with_start_and_end_times");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_timestamp() !== 5457) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_timestamp");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sea_level_sunrise() !== 22630) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sea_level_sunrise");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sea_level_sunset() !== 23783) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sea_level_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sunrise() !== 22626) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sunrise");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sunset() !== 29434) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_astronomicalcalendar_get_utc_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_120() !== 48582) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_120");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_120_zmanis() !== 25920) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_120_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_16_point_1_degrees() !== 20901) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_18_degrees() !== 23652) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_18_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_19_degrees() !== 55481) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_19_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_19_point_8_degrees() !== 4080) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_19_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_26_degrees() !== 64809) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_26_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_60() !== 47303) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_60");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_72_zmanis() !== 50364) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_72_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_90() !== 19837) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_90");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_90_zmanis() !== 12400) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_90_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_96() !== 21524) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_96");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_96_zmanis() !== 36004) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_96_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_baal_hatanya() !== 12575) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_alos_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_astronomical_calendar() !== 13876) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_astronomical_calendar");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_ateret_torah_sunset_offset() !== 7175) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_ateret_torah_sunset_offset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_13_point_24_degrees() !== 2134) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_13_point_24_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_13_point_5_minutes_before_7_point_083_degrees() !== 35449) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_13_point_5_minutes_before_7_point_083_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_2_stars() !== 21245) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_2_stars");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_58_point_5_minutes() !== 60329) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_rt_58_point_5_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_13_point_5_minutes() !== 49609) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_13_point_5_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_16_point_875_minutes() !== 57416) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_16_point_875_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_18_minutes() !== 21764) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_18_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_2_point_1_degrees() !== 31971) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_2_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_2_point_8_degrees() !== 52603) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_2_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_3_point_05_degrees() !== 23744) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hashmashos_yereim_3_point_05_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_13_point_24_degrees() !== 52444) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_13_point_24_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_13_point_5_minutes_before_7_point_083_degrees() !== 47710) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_13_point_5_minutes_before_7_point_083_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_2_stars() !== 37031) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_2_stars");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_58_point_5_minutes() !== 30994) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosrt_58_point_5_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_13_point_5_minutes() !== 32816) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_13_point_5_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_16_point_875_minutes() !== 2477) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_16_point_875_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_18_minutes() !== 45356) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_18_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_2_point_1_degrees() !== 54242) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_2_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_2_point_8_degrees() !== 34750) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_2_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_3_point_05_degrees() !== 42404) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_bain_hasmashosyereim_3_point_05_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_candle_lighting_offset() !== 26485) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_candle_lighting_offset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_fixed_local_chatzos() !== 18084) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_fixed_local_chatzos_based_zmanim() !== 3083) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_fixed_local_chatzos_based_zmanim");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_16_point_1_degrees() !== 46680) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_30_minutes() !== 29504) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_30_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_72_minutes() !== 35627) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_ahavat_shalom() !== 30157) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_ahavat_shalom");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_ateret_torah() !== 17467) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_baal_hatanya() !== 49576) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_baal_hatanya_greater_than_30() !== 13677) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_baal_hatanya_greater_than_30");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_gra_fixed_local_chatzos_30_minutes() !== 56007) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_gra_fixed_local_chatzos_30_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_greater_than_30() !== 14350) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_gedola_greater_than_30");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_16_point_1_degrees() !== 51580) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_72_minutes() !== 49765) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_ahavat_shalom() !== 51101) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_ahavat_shalom");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_ateret_torah() !== 52689) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_baal_hatanya() !== 12508) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_gra_fixed_local_chatzos_to_sunset() !== 9807) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_mincha_ketana_gra_fixed_local_chatzos_to_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_10_point_2_degrees() !== 58955) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_10_point_2_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_11_degrees() !== 48093) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_11_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_11_point_5_degrees() !== 47599) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_11_point_5_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_7_point_65_degrees() !== 40310) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_7_point_65_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_9_point_5_degrees() !== 605) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_misheyakir_9_point_5_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_ahavat_shalom() !== 62525) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_ahavat_shalom");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_alos_16_point_1_to_tzais_geonim_7_point_083_degrees() !== 64193) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_alos_16_point_1_to_tzais_geonim_7_point_083_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_alos_to_sunset() !== 59347) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_alos_to_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_120_minutes() !== 48573) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_120_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_120_minutes_zmanis() !== 51079) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_120_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_16_point_1_degrees() !== 41190) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_18_degrees() !== 16664) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_18_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_19_point_8_degrees() !== 53540) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_19_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_26_degrees() !== 25526) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_26_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_60_minutes() !== 558) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_60_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_72_minutes() !== 25979) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_72_minutes_zmanis() !== 57762) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_72_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_90_minutes() !== 18702) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_90_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_90_minutes_zmanis() !== 2976) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_90_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_96_minutes() !== 52628) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_96_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_96_minutes_zmanis() !== 32732) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_96_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_ateret_torah() !== 41470) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_baal_hatanya() !== 6323) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_gra_fixed_local_chatzos_to_sunset() !== 13895) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_plag_hamincha_gra_fixed_local_chatzos_to_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_16_point_1_degrees() !== 35373) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_72_minutes() !== 4572) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_gra() !== 38016) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_samuch_le_mincha_ketana_gra");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_120_minutes() !== 10814) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_120_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_120_minutes_zmanis() !== 62946) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_120_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_16_point_1_degrees() !== 43475) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_18_degrees() !== 52852) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_18_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_19_point_8_degrees() !== 30492) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_19_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_26_degrees() !== 3749) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_26_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_60_minutes() !== 42906) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_60_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_72_minutes() !== 2556) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_72_minutes_zmanis() !== 40431) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_72_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_90_minutes() !== 43283) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_90_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_90_minutes_zmanis() !== 34655) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_90_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_96_minutes() !== 64111) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_96_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_96_minutes_zmanis() !== 49232) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_96_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_alos_16_point_1_to_tzais_3_point_7() !== 42532) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_alos_16_point_1_to_tzais_3_point_7");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_alos_16_point_1_to_tzais_3_point_8() !== 4104) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_alos_16_point_1_to_tzais_3_point_8");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_ateret_torah() !== 18786) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_baal_hatanya() !== 7832) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_shaah_zmanis_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_baal_hatanya() !== 9370) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_gra() !== 8758) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_gra");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_16_point_1_degrees() !== 27003) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_72_minutes() !== 52878) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_72_minutes_zmanis() !== 8958) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_achilas_chametz_mga_72_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_baal_hatanya() !== 54751) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_gra() !== 26192) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_gra");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_16_point_1_degrees() !== 55899) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_72_minutes() !== 14723) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_72_minutes_zmanis() !== 46863) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_biur_chametz_mga_72_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_15_days() !== 40848) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_15_days");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_15_days_default() !== 40468) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_15_days_default");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_between_moldos() !== 20960) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_between_moldos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_between_moldos_default() !== 8680) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_kidush_levana_between_moldos_default");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_3_hours_before_chatzos() !== 7200) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_3_hours_before_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_alos_16_point_1_to_sunset() !== 37150) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_alos_16_point_1_to_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_alos_16_point_1_to_tzais_geonim_7_point_083_degrees() !== 8206) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_alos_16_point_1_to_tzais_geonim_7_point_083_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_ateret_torah() !== 8518) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_baal_hatanya() !== 18486) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_fixed_local() !== 16063) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_fixed_local");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_gra_sunrise_to_fixed_local_chatzos() !== 58695) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_gra_sunrise_to_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_kol_eliyahu() !== 17817) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_kol_eliyahu");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_120_minutes() !== 51894) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_120_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_16_point_1_degrees() !== 62121) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_16_point_1_degrees_to_fixed_local_chatzos() !== 24402) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_16_point_1_degrees_to_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_18_degrees() !== 25825) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_18_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_18_degrees_to_fixed_local_chatzos() !== 4464) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_18_degrees_to_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_19_point_8_degrees() !== 41385) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_19_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes() !== 40558) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes_to_fixed_local_chatzos() !== 16594) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes_to_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes_zmanis() !== 19288) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_72_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes() !== 28107) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes_to_fixed_local_chatzos() !== 50933) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes_to_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes_zmanis() !== 2652) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_90_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_96_minutes() !== 20485) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_96_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_96_minutes_zmanis() !== 62040) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_shma_mga_96_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_2_hours_before_chatzos() !== 54480) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_2_hours_before_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_ateret_torah() !== 34025) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_baal_hatanya() !== 59083) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_fixed_local() !== 44319) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_fixed_local");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_gra_sunrise_to_fixed_local_chatzos() !== 54477) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_gra_sunrise_to_fixed_local_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_120_minutes() !== 3137) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_120_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_16_point_1_degrees() !== 55912) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_18_degrees() !== 39612) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_18_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_19_point_8_degrees() !== 309) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_19_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_72_minutes() !== 54692) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_72_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_72_minutes_zmanis() !== 51829) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_72_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_90_minutes() !== 22866) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_90_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_90_minutes_zmanis() !== 41522) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_90_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_96_minutes() !== 62775) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_96_minutes");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_96_minutes_zmanis() !== 25086) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfila_mga_96_minutes_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfilah_ateret_torah() !== 62677) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_sof_zman_tfilah_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_3_days() !== 27286) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_3_days");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_3_days_with_times() !== 31605) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_3_days_with_times");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_7_days() !== 45982) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_7_days");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_7_days_default() !== 38286) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tchilas_zman_kidush_levana_7_days_default");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_120() !== 52832) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_120");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_120_zmanis() !== 61796) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_120_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_16_point_1_degrees() !== 49788) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_16_point_1_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_18_degrees() !== 45922) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_18_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_19_point_8_degrees() !== 5829) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_19_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_26_degrees() !== 11870) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_26_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_50() !== 17943) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_50");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_60() !== 31840) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_60");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_72_zmanis() !== 34591) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_72_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_90() !== 41989) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_90");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_90_zmanis() !== 5800) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_90_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_96() !== 11807) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_96");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_96_zmanis() !== 2711) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_96_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_ateret_torah() !== 59206) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_ateret_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_baal_hatanya() !== 16596) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_baal_hatanya");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_65_degrees() !== 43653) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_65_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_676_degrees() !== 23197) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_676_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_7_degrees() !== 23058) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_7_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_8_degrees() !== 18091) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_3_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_4_point_37_degrees() !== 64877) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_4_point_37_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_4_point_61_degrees() !== 25702) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_4_point_61_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_4_point_8_degrees() !== 11242) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_4_point_8_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_5_point_88_degrees() !== 44153) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_5_point_88_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_5_point_95_degrees() !== 31751) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_5_point_95_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_6_point_45_degrees() !== 59135) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_6_point_45_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_7_point_083_degrees() !== 48808) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_7_point_083_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_7_point_67_degrees() !== 18226) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_7_point_67_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_8_point_5_degrees() !== 65499) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_8_point_5_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_9_point_3_degrees() !== 60242) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_9_point_3_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_9_point_75_degrees() !== 61681) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_tzais_geonim_9_point_75_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_use_astronomical_chatzos() !== 35399) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_use_astronomical_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_use_astronomical_chatzos_for_other_zmanim() !== 14721) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_use_astronomical_chatzos_for_other_zmanim");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_zman_molad() !== 44122) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_complexzmanimcalendar_get_zman_molad");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_geodesic_distance() !== 62033) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_geodesic_distance");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_geodesic_final_bearing() !== 27490) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_geodesic_final_bearing");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_geodesic_initial_bearing() !== 36808) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_geodesic_initial_bearing");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_get_elevation() !== 53256) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_get_elevation");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_get_latitude() !== 11900) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_get_latitude");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_get_longitude() !== 53669) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_get_longitude");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_rhumb_line_bearing() !== 21906) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_rhumb_line_bearing");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_rhumb_line_distance() !== 18055) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_rhumb_line_distance");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_geolocation_vincenty_inverse_formula() !== 57718) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_geolocation_vincenty_inverse_formula");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_bavli_daf_yomi() !== 54974) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_bavli_daf_yomi");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_day_of_chanukah() !== 52566) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_day_of_chanukah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_day_of_omer() !== 26068) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_day_of_omer");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_in_israel() !== 20250) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_in_israel");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_jewish_date() !== 39592) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_jewish_date");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_parshah() !== 3074) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_parshah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_use_modern_holidays() !== 23527) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_use_modern_holidays");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_get_yom_tov_index() !== 50909) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_get_yom_tov_index");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_has_candle_lighting() !== 40482) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_has_candle_lighting");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_aseres_yemei_teshuva() !== 64432) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_aseres_yemei_teshuva");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_assur_bemelacha() !== 11688) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_assur_bemelacha");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_chanukah() !== 12392) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_chanukah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_chol_hamoed() !== 32230) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_chol_hamoed");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_chol_hamoed_pesach() !== 26780) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_chol_hamoed_pesach");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_chol_hamoed_succos() !== 7096) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_chol_hamoed_succos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_erev_yom_tov() !== 49090) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_erev_yom_tov");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_erev_yom_tov_sheni() !== 14387) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_erev_yom_tov_sheni");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_hoshana_rabba() !== 1316) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_hoshana_rabba");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_isru_chag() !== 35283) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_isru_chag");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_pesach() !== 3826) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_pesach");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_purim() !== 16100) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_purim");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_rosh_chodesh() !== 8221) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_rosh_chodesh");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_rosh_hashana() !== 15876) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_rosh_hashana");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_shavuos() !== 51728) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_shavuos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_shemini_atzeres() !== 17118) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_shemini_atzeres");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_simchas_torah() !== 48466) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_simchas_torah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_succos() !== 36900) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_succos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_taanis() !== 12867) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_taanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_taanis_bechoros() !== 44134) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_taanis_bechoros");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_tisha_beav() !== 65009) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_tisha_beav");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_tomorrow_shabbos_or_yom_tov() !== 52722) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_tomorrow_shabbos_or_yom_tov");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_yom_kippur() !== 7664) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_yom_kippur");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_yom_tov() !== 41380) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_yom_tov");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishcalendar_is_yom_tov_assur_bemelacha() !== 15967) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishcalendar_is_yom_tov_assur_bemelacha");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_chalakim_since_molad_tohu() !== 56202) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_chalakim_since_molad_tohu");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_cheshvan_kislev_kviah() !== 51674) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_cheshvan_kislev_kviah");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_day_of_week() !== 55271) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_day_of_week");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_days_in_jewish_month() !== 19694) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_days_in_jewish_month");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_days_in_jewish_year() !== 19713) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_days_in_jewish_year");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_days_since_start_of_jewish_year() !== 50707) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_days_since_start_of_jewish_year");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_gregorian_day_of_month() !== 22662) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_gregorian_day_of_month");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_gregorian_month() !== 18768) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_gregorian_month");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_gregorian_year() !== 24044) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_gregorian_year");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_jewish_day_of_month() !== 32340) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_jewish_day_of_month");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_jewish_month() !== 59238) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_jewish_month");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_jewish_year() !== 39347) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_jewish_year");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_molad_data() !== 29846) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_molad_data");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_get_molad_date() !== 32020) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_get_molad_date");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_is_cheshvan_long() !== 42144) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_is_cheshvan_long");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_is_jewish_leap_year() !== 49033) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_is_jewish_leap_year");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_jewishdate_is_kislev_short() !== 44688) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_jewishdate_is_kislev_short");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_noaacalculator_get_solar_azimuth() !== 65501) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_noaacalculator_get_solar_azimuth");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_noaacalculator_get_solar_elevation() !== 36899) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_noaacalculator_get_solar_elevation");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_midnight() !== 14576) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_midnight");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_noon() !== 43731) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_noon");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_sunrise() !== 10089) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_sunrise");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_sunset() !== 58722) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_noaacalculator_get_utc_sunset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar__get_mincha_gedola() !== 6028) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar__get_mincha_gedola");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar__get_mincha_ketana() !== 60269) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar__get_mincha_ketana");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar__get_plag_hamincha() !== 63219) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar__get_plag_hamincha");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar__get_samuch_le_mincha_ketana() !== 3882) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar__get_samuch_le_mincha_ketana");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar__get_sof_zman_shma() !== 10834) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar__get_sof_zman_shma");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar__get_sof_zman_tfila() !== 9134) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar__get_sof_zman_tfila");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_alos72() !== 36744) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_alos72");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_alos_hashachar() !== 57562) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_alos_hashachar");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_astronomical_calendar() !== 28643) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_astronomical_calendar");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_candle_lighting() !== 57067) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_candle_lighting");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_candle_lighting_offset() !== 18649) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_candle_lighting_offset");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_chatzos() !== 28341) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_chatzos_as_half_day() !== 2021) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_chatzos_as_half_day");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_half_day_based_shaah_zmanis() !== 64353) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_half_day_based_shaah_zmanis");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_half_day_based_zman() !== 38483) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_half_day_based_zman");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_gedola_default() !== 43718) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_gedola_default");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_gedola_simple() !== 25011) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_gedola_simple");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_ketana_default() !== 1744) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_ketana_default");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_ketana_simple() !== 55145) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_mincha_ketana_simple");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_percent_of_shaah_zmanis_from_degrees() !== 65181) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_percent_of_shaah_zmanis_from_degrees");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_plag_hamincha_default() !== 6441) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_plag_hamincha_default");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_plag_hamincha_simple() !== 25025) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_plag_hamincha_simple");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_samuch_le_mincha_ketana_simple() !== 57139) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_samuch_le_mincha_ketana_simple");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_shaah_zmanis_based_zman() !== 28559) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_shaah_zmanis_based_zman");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_shaah_zmanis_gra() !== 63034) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_shaah_zmanis_gra");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_shaah_zmanis_mga() !== 20604) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_shaah_zmanis_mga");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_shma_gra() !== 48994) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_shma_gra");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_shma_mga() !== 47235) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_shma_mga");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_shma_simple() !== 18087) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_shma_simple");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_tfila_gra() !== 3389) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_tfila_gra");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_tfila_mga() !== 23676) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_tfila_mga");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_tfila_simple() !== 63288) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_sof_zman_tfila_simple");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_tzais() !== 24640) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_tzais");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_tzais72() !== 51548) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_tzais72");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_use_astronomical_chatzos() !== 27733) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_use_astronomical_chatzos");
    }
    if (nativeModule().ubrn_uniffi_zmanim_core_checksum_method_zmanimcalendar_get_use_astronomical_chatzos_for_other_zmanim() !== 58719) {
        throw new UniffiInternalError.ApiChecksumMismatch("uniffi_zmanim_core_checksum_method_zmanimcalendar_get_use_astronomical_chatzos_for_other_zmanim");
    }

    }

export default Object.freeze({
  initialize: uniffiEnsureInitialized,
  converters: {
    FfiConverterTypeAstronomicalCalculator,
    FfiConverterTypeAstronomicalCalendar,
    FfiConverterTypeBavliDaf,
    FfiConverterTypeBavliTractate,
    FfiConverterTypeComplexZmanimCalendar,
    FfiConverterTypeDayOfWeek,
    FfiConverterTypeFormula,
    FfiConverterTypeGeoLocation,
    FfiConverterTypeJewishCalendar,
    FfiConverterTypeJewishDate,
    FfiConverterTypeJewishHoliday,
    FfiConverterTypeJewishMonth,
    FfiConverterTypeMoladData,
    FfiConverterTypeNOAACalculator,
    FfiConverterTypeParsha,
    FfiConverterTypeSolarEvent,
    FfiConverterTypeYearLengthType,
    FfiConverterTypeZmanimCalendar,
  }
});